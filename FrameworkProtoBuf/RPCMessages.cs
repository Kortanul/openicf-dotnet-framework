// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RPCMessages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.ForgeRock.OpenICF.Common.ProtoBuf {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class RPCMessages {

    #region Static variables
    internal static pbr::FieldAccessorTable internal__static_HandshakeMessage__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ExceptionMessage__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ExceptionMessage_InnerCause__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_CancelOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ControlRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ControlResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ControlResponse_StringMapFieldEntry__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_PingMessage__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_RPCRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_RPCResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_RemoteMessage__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RPCMessages() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFSUENNZXNzYWdlcy5wcm90bxoXT3BlcmF0aW9uTWVzc2FnZXMucHJvdG8i", 
            "mwEKEEhhbmRzaGFrZU1lc3NhZ2USEQoJc2Vzc2lvbklkGAEgASgJEjAKCnNl", 
            "cnZlclR5cGUYAiABKA4yHC5IYW5kc2hha2VNZXNzYWdlLlNlcnZlclR5cGUS", 
            "EQoJcHVibGljS2V5GAMgASgMIi8KClNlcnZlclR5cGUSCwoHVU5LTk9XThAA", 
            "EggKBEpBVkEQARIKCgZET1RORVQQAiLlAQoQRXhjZXB0aW9uTWVzc2FnZRIW", 
            "Cg5leGNlcHRpb25DbGFzcxgBIAEoCRIPCgdtZXNzYWdlGAIgASgJEjAKCmlu", 
            "bmVyQ2F1c2UYAyABKAsyHC5FeGNlcHRpb25NZXNzYWdlLklubmVyQ2F1c2US", 
            "EgoKc3RhY2tUcmFjZRgEIAEoCRpiCgpJbm5lckNhdXNlEhYKDmV4Y2VwdGlv", 
            "bkNsYXNzGAEgASgJEg8KB21lc3NhZ2UYAiABKAkSKwoFY2F1c2UYAyABKAsy", 
            "HC5FeGNlcHRpb25NZXNzYWdlLklubmVyQ2F1c2UiEQoPQ2FuY2VsT3BSZXF1", 
            "ZXN0In8KDkNvbnRyb2xSZXF1ZXN0EiwKCWluZm9MZXZlbBgBIAMoDjIZLkNv", 
            "bnRyb2xSZXF1ZXN0LkluZm9MZXZlbCI/CglJbmZvTGV2ZWwSEgoOQ09OTkVD", 
            "VE9SX0lORk8QABIQCgxDT05URVhUX0lORk8QARIMCghSRVFVRVNUUxACIq4B", 
            "Cg9Db250cm9sUmVzcG9uc2USPAoOY29udGV4dEluZm9NYXAYASADKAsyJC5D", 
            "b250cm9sUmVzcG9uc2UuU3RyaW5nTWFwRmllbGRFbnRyeRIWCg5jb25uZWN0", 
            "b3JJbmZvcxgCIAEoDBISCgpyZXF1ZXN0SWRzGAMgAygDGjEKE1N0cmluZ01h", 
            "cEZpZWxkRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJIg0KC1Bp", 
            "bmdNZXNzYWdlIroBCgpSUENSZXF1ZXN0EisKEGhhbmRzaGFrZU1lc3NhZ2UY", 
            "ASABKAsyES5IYW5kc2hha2VNZXNzYWdlEicKDmNvbnRyb2xSZXF1ZXN0GAIg", 
            "ASgLMg8uQ29udHJvbFJlcXVlc3QSKwoQb3BlcmF0aW9uUmVxdWVzdBgDIAEo", 
            "CzIRLk9wZXJhdGlvblJlcXVlc3QSKQoPY2FuY2VsT3BSZXF1ZXN0GAQgASgL", 
            "MhAuQ2FuY2VsT3BSZXF1ZXN0IrYBCgtSUENSZXNwb25zZRIrChBoYW5kc2hh", 
            "a2VNZXNzYWdlGAEgASgLMhEuSGFuZHNoYWtlTWVzc2FnZRIpCg9jb250cm9s", 
            "UmVzcG9uc2UYAiABKAsyEC5Db250cm9sUmVzcG9uc2USLQoRb3BlcmF0aW9u", 
            "UmVzcG9uc2UYAyABKAsyEi5PcGVyYXRpb25SZXNwb25zZRIgCgVlcnJvchgE", 
            "IAEoCzIRLkV4Y2VwdGlvbk1lc3NhZ2UiYAoNUmVtb3RlTWVzc2FnZRIRCglt", 
            "ZXNzYWdlSWQYASABKAMSHAoHcmVxdWVzdBgCIAEoCzILLlJQQ1JlcXVlc3QS", 
            "HgoIcmVzcG9uc2UYAyABKAsyDC5SUENSZXNwb25zZUIoqgIlT3JnLkZvcmdl", 
          "Um9jay5PcGVuSUNGLkNvbW1vbi5Qcm90b0J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] {
          global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor, 
          });
      internal__static_HandshakeMessage__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage), descriptor.MessageTypes[0],
              new string[] { "SessionId", "ServerType", "PublicKey", }, new string[] { });
      internal__static_ExceptionMessage__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage), descriptor.MessageTypes[1],
              new string[] { "ExceptionClass", "Message", "InnerCause", "StackTrace", }, new string[] { });
      internal__static_ExceptionMessage_InnerCause__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage.Types.InnerCause), descriptor.MessageTypes[1].NestedTypes[0],
              new string[] { "ExceptionClass", "Message", "Cause", }, new string[] { });
      internal__static_CancelOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CancelOpRequest), descriptor.MessageTypes[2],
              new string[] { }, new string[] { });
      internal__static_ControlRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlRequest), descriptor.MessageTypes[3],
              new string[] { "InfoLevel", }, new string[] { });
      internal__static_ControlResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlResponse), descriptor.MessageTypes[4],
              new string[] { "ContextInfoMap", "ConnectorInfos", "RequestIds", }, new string[] { });
      internal__static_ControlResponse_StringMapFieldEntry__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlResponse.Types.StringMapFieldEntry), descriptor.MessageTypes[4].NestedTypes[0],
              new string[] { "Key", "Value", }, new string[] { });
      internal__static_PingMessage__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.PingMessage), descriptor.MessageTypes[5],
              new string[] { }, new string[] { });
      internal__static_RPCRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCRequest), descriptor.MessageTypes[6],
              new string[] { "HandshakeMessage", "ControlRequest", "OperationRequest", "CancelOpRequest", }, new string[] { });
      internal__static_RPCResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCResponse), descriptor.MessageTypes[7],
              new string[] { "HandshakeMessage", "ControlResponse", "OperationResponse", "Error", }, new string[] { });
      internal__static_RemoteMessage__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RemoteMessage), descriptor.MessageTypes[8],
              new string[] { "MessageId", "Request", "Response", }, new string[] { });
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HandshakeMessage : pb::IMessage<HandshakeMessage> {
    private static readonly pb::MessageParser<HandshakeMessage> _parser = new pb::MessageParser<HandshakeMessage>(() => new HandshakeMessage());
    public static pb::MessageParser<HandshakeMessage> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "publicKey", "serverType", "sessionId" };
    private static readonly uint[] _fieldTags = new uint[] { 26, 16, 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.Descriptor.MessageTypes[0]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.internal__static_HandshakeMessage__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public HandshakeMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public HandshakeMessage(HandshakeMessage other) : this() {
      sessionId_ = other.sessionId_;
      serverType_ = other.serverType_;
      publicKey_ = other.publicKey_;
    }

    public HandshakeMessage Clone() {
      return new HandshakeMessage(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int SessionIdFieldNumber = 1;
    private string sessionId_ = "";
    public string SessionId {
      get { return sessionId_; }
      set {
        pb::Freezable.CheckMutable(this);
        sessionId_ = value ?? "";
      }
    }

    public const int ServerTypeFieldNumber = 2;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage.Types.ServerType serverType_ = global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage.Types.ServerType.UNKNOWN;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage.Types.ServerType ServerType {
      get { return serverType_; }
      set {
        pb::Freezable.CheckMutable(this);
        serverType_ = value;
      }
    }

    public const int PublicKeyFieldNumber = 3;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        pb::Freezable.CheckMutable(this);
        publicKey_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as HandshakeMessage);
    }

    public bool Equals(HandshakeMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionId != other.SessionId) return false;
      if (ServerType != other.ServerType) return false;
      if (PublicKey != other.PublicKey) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (ServerType != global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage.Types.ServerType.UNKNOWN) hash ^= ServerType.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionId);
      }
      if (ServerType != global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage.Types.ServerType.UNKNOWN) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ServerType);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PublicKey);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (ServerType != global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage.Types.ServerType.UNKNOWN) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServerType);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      return size;
    }

    public void MergeFrom(HandshakeMessage other) {
      if (other == null) {
        return;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.ServerType != global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage.Types.ServerType.UNKNOWN) {
        ServerType = other.ServerType;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            SessionId = input.ReadString();
            break;
          }
          case 16: {
            serverType_ = (global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage.Types.ServerType) input.ReadEnum();
            break;
          }
          case 26: {
            PublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ServerType {
        UNKNOWN = 0,
        JAVA = 1,
        DOTNET = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExceptionMessage : pb::IMessage<ExceptionMessage> {
    private static readonly pb::MessageParser<ExceptionMessage> _parser = new pb::MessageParser<ExceptionMessage>(() => new ExceptionMessage());
    public static pb::MessageParser<ExceptionMessage> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "exceptionClass", "innerCause", "message", "stackTrace" };
    private static readonly uint[] _fieldTags = new uint[] { 10, 26, 18, 34 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.Descriptor.MessageTypes[1]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.internal__static_ExceptionMessage__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ExceptionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ExceptionMessage(ExceptionMessage other) : this() {
      exceptionClass_ = other.exceptionClass_;
      message_ = other.message_;
      InnerCause = other.innerCause_ != null ? other.InnerCause.Clone() : null;
      stackTrace_ = other.stackTrace_;
    }

    public ExceptionMessage Clone() {
      return new ExceptionMessage(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (innerCause_ != null) InnerCause.Freeze();
    }

    public const int ExceptionClassFieldNumber = 1;
    private string exceptionClass_ = "";
    public string ExceptionClass {
      get { return exceptionClass_; }
      set {
        pb::Freezable.CheckMutable(this);
        exceptionClass_ = value ?? "";
      }
    }

    public const int MessageFieldNumber = 2;
    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        pb::Freezable.CheckMutable(this);
        message_ = value ?? "";
      }
    }

    public const int InnerCauseFieldNumber = 3;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage.Types.InnerCause innerCause_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage.Types.InnerCause InnerCause {
      get { return innerCause_; }
      set {
        pb::Freezable.CheckMutable(this);
        innerCause_ = value;
      }
    }

    public const int StackTraceFieldNumber = 4;
    private string stackTrace_ = "";
    public string StackTrace {
      get { return stackTrace_; }
      set {
        pb::Freezable.CheckMutable(this);
        stackTrace_ = value ?? "";
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ExceptionMessage);
    }

    public bool Equals(ExceptionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExceptionClass != other.ExceptionClass) return false;
      if (Message != other.Message) return false;
      if (!object.Equals(InnerCause, other.InnerCause)) return false;
      if (StackTrace != other.StackTrace) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ExceptionClass.Length != 0) hash ^= ExceptionClass.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (innerCause_ != null) hash ^= InnerCause.GetHashCode();
      if (StackTrace.Length != 0) hash ^= StackTrace.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ExceptionClass.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ExceptionClass);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (innerCause_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InnerCause);
      }
      if (StackTrace.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StackTrace);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ExceptionClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExceptionClass);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (innerCause_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InnerCause);
      }
      if (StackTrace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StackTrace);
      }
      return size;
    }

    public void MergeFrom(ExceptionMessage other) {
      if (other == null) {
        return;
      }
      if (other.ExceptionClass.Length != 0) {
        ExceptionClass = other.ExceptionClass;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.innerCause_ != null) {
        if (innerCause_ == null) {
          innerCause_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage.Types.InnerCause();
        }
        InnerCause.MergeFrom(other.InnerCause);
      }
      if (other.StackTrace.Length != 0) {
        StackTrace = other.StackTrace;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ExceptionClass = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            if (innerCause_ == null) {
              innerCause_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage.Types.InnerCause();
            }
            input.ReadMessage(innerCause_);
            break;
          }
          case 34: {
            StackTrace = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class InnerCause : pb::IMessage<InnerCause> {
        private static readonly pb::MessageParser<InnerCause> _parser = new pb::MessageParser<InnerCause>(() => new InnerCause());
        public static pb::MessageParser<InnerCause> Parser { get { return _parser; } }

        private static readonly string[] _fieldNames = new string[] { "cause", "exceptionClass", "message" };
        private static readonly uint[] _fieldTags = new uint[] { 26, 10, 18 };
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage.Descriptor.NestedTypes[0]; }
        }

        pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
          get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.internal__static_ExceptionMessage_InnerCause__FieldAccessorTable; }
        }

        private bool _frozen = false;
        public bool IsFrozen { get { return _frozen; } }

        public InnerCause() {
          OnConstruction();
        }

        partial void OnConstruction();

        public InnerCause(InnerCause other) : this() {
          exceptionClass_ = other.exceptionClass_;
          message_ = other.message_;
          Cause = other.cause_ != null ? other.Cause.Clone() : null;
        }

        public InnerCause Clone() {
          return new InnerCause(this);
        }

        public void Freeze() {
          if (IsFrozen) {
            return;
          }
          _frozen = true;
          if (cause_ != null) Cause.Freeze();
        }

        public const int ExceptionClassFieldNumber = 1;
        private string exceptionClass_ = "";
        public string ExceptionClass {
          get { return exceptionClass_; }
          set {
            pb::Freezable.CheckMutable(this);
            exceptionClass_ = value ?? "";
          }
        }

        public const int MessageFieldNumber = 2;
        private string message_ = "";
        public string Message {
          get { return message_; }
          set {
            pb::Freezable.CheckMutable(this);
            message_ = value ?? "";
          }
        }

        public const int CauseFieldNumber = 3;
        private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage.Types.InnerCause cause_;
        public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage.Types.InnerCause Cause {
          get { return cause_; }
          set {
            pb::Freezable.CheckMutable(this);
            cause_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as InnerCause);
        }

        public bool Equals(InnerCause other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ExceptionClass != other.ExceptionClass) return false;
          if (Message != other.Message) return false;
          if (!object.Equals(Cause, other.Cause)) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (ExceptionClass.Length != 0) hash ^= ExceptionClass.GetHashCode();
          if (Message.Length != 0) hash ^= Message.GetHashCode();
          if (cause_ != null) hash ^= Cause.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (ExceptionClass.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ExceptionClass);
          }
          if (Message.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Message);
          }
          if (cause_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Cause);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (ExceptionClass.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ExceptionClass);
          }
          if (Message.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
          }
          if (cause_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cause);
          }
          return size;
        }

        public void MergeFrom(InnerCause other) {
          if (other == null) {
            return;
          }
          if (other.ExceptionClass.Length != 0) {
            ExceptionClass = other.ExceptionClass;
          }
          if (other.Message.Length != 0) {
            Message = other.Message;
          }
          if (other.cause_ != null) {
            if (cause_ == null) {
              cause_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage.Types.InnerCause();
            }
            Cause.MergeFrom(other.Cause);
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while (input.ReadTag(out tag)) {
            switch(tag) {
              case 0:
                throw pb::InvalidProtocolBufferException.InvalidTag();
              default:
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              case 10: {
                ExceptionClass = input.ReadString();
                break;
              }
              case 18: {
                Message = input.ReadString();
                break;
              }
              case 26: {
                if (cause_ == null) {
                  cause_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage.Types.InnerCause();
                }
                input.ReadMessage(cause_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CancelOpRequest : pb::IMessage<CancelOpRequest> {
    private static readonly pb::MessageParser<CancelOpRequest> _parser = new pb::MessageParser<CancelOpRequest>(() => new CancelOpRequest());
    public static pb::MessageParser<CancelOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] {  };
    private static readonly uint[] _fieldTags = new uint[] {  };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.Descriptor.MessageTypes[2]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.internal__static_CancelOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public CancelOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CancelOpRequest(CancelOpRequest other) : this() {
    }

    public CancelOpRequest Clone() {
      return new CancelOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public override bool Equals(object other) {
      return Equals(other as CancelOpRequest);
    }

    public bool Equals(CancelOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(CancelOpRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ControlRequest : pb::IMessage<ControlRequest> {
    private static readonly pb::MessageParser<ControlRequest> _parser = new pb::MessageParser<ControlRequest>(() => new ControlRequest());
    public static pb::MessageParser<ControlRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "infoLevel" };
    private static readonly uint[] _fieldTags = new uint[] { 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.Descriptor.MessageTypes[3]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.internal__static_ControlRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ControlRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ControlRequest(ControlRequest other) : this() {
      infoLevel_ = other.infoLevel_.Clone();
    }

    public ControlRequest Clone() {
      return new ControlRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      infoLevel_.Freeze();
    }

    public const int InfoLevelFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlRequest.Types.InfoLevel> _repeated_infoLevel_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlRequest.Types.InfoLevel) x);private readonly pbc::RepeatedField<global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlRequest.Types.InfoLevel> infoLevel_ = new pbc::RepeatedField<global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlRequest.Types.InfoLevel>();
    public pbc::RepeatedField<global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlRequest.Types.InfoLevel> InfoLevel {
      get { return infoLevel_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ControlRequest);
    }

    public bool Equals(ControlRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!infoLevel_.Equals(other.infoLevel_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= infoLevel_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      infoLevel_.WriteTo(output, _repeated_infoLevel_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += infoLevel_.CalculateSize(_repeated_infoLevel_codec);
      return size;
    }

    public void MergeFrom(ControlRequest other) {
      if (other == null) {
        return;
      }
      infoLevel_.Add(other.infoLevel_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10:
          case 8: {
            infoLevel_.AddEntriesFrom(input, _repeated_infoLevel_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum InfoLevel {
        CONNECTOR_INFO = 0,
        CONTEXT_INFO = 1,
        REQUESTS = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ControlResponse : pb::IMessage<ControlResponse> {
    private static readonly pb::MessageParser<ControlResponse> _parser = new pb::MessageParser<ControlResponse>(() => new ControlResponse());
    public static pb::MessageParser<ControlResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "connectorInfos", "contextInfoMap", "requestIds" };
    private static readonly uint[] _fieldTags = new uint[] { 18, 10, 26 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.Descriptor.MessageTypes[4]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.internal__static_ControlResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ControlResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ControlResponse(ControlResponse other) : this() {
      contextInfoMap_ = other.contextInfoMap_.Clone();
      connectorInfos_ = other.connectorInfos_;
      requestIds_ = other.requestIds_.Clone();
    }

    public ControlResponse Clone() {
      return new ControlResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      contextInfoMap_.Freeze();
      requestIds_.Freeze();
    }

    public const int ContextInfoMapFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlResponse.Types.StringMapFieldEntry> _repeated_contextInfoMap_codec
        = pb::FieldCodec.ForMessage(10, global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlResponse.Types.StringMapFieldEntry.Parser);
    private readonly pbc::RepeatedField<global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlResponse.Types.StringMapFieldEntry> contextInfoMap_ = new pbc::RepeatedField<global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlResponse.Types.StringMapFieldEntry>();
    public pbc::RepeatedField<global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlResponse.Types.StringMapFieldEntry> ContextInfoMap {
      get { return contextInfoMap_; }
    }

    public const int ConnectorInfosFieldNumber = 2;
    private pb::ByteString connectorInfos_ = pb::ByteString.Empty;
    public pb::ByteString ConnectorInfos {
      get { return connectorInfos_; }
      set {
        pb::Freezable.CheckMutable(this);
        connectorInfos_ = value ?? pb::ByteString.Empty;
      }
    }

    public const int RequestIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_requestIds_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> requestIds_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> RequestIds {
      get { return requestIds_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ControlResponse);
    }

    public bool Equals(ControlResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!contextInfoMap_.Equals(other.contextInfoMap_)) return false;
      if (ConnectorInfos != other.ConnectorInfos) return false;
      if(!requestIds_.Equals(other.requestIds_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= contextInfoMap_.GetHashCode();
      if (ConnectorInfos.Length != 0) hash ^= ConnectorInfos.GetHashCode();
      hash ^= requestIds_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      contextInfoMap_.WriteTo(output, _repeated_contextInfoMap_codec);
      if (ConnectorInfos.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ConnectorInfos);
      }
      requestIds_.WriteTo(output, _repeated_requestIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += contextInfoMap_.CalculateSize(_repeated_contextInfoMap_codec);
      if (ConnectorInfos.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConnectorInfos);
      }
      size += requestIds_.CalculateSize(_repeated_requestIds_codec);
      return size;
    }

    public void MergeFrom(ControlResponse other) {
      if (other == null) {
        return;
      }
      contextInfoMap_.Add(other.contextInfoMap_);
      if (other.ConnectorInfos.Length != 0) {
        ConnectorInfos = other.ConnectorInfos;
      }
      requestIds_.Add(other.requestIds_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            contextInfoMap_.AddEntriesFrom(input, _repeated_contextInfoMap_codec);
            break;
          }
          case 18: {
            ConnectorInfos = input.ReadBytes();
            break;
          }
          case 26:
          case 24: {
            requestIds_.AddEntriesFrom(input, _repeated_requestIds_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class StringMapFieldEntry : pb::IMessage<StringMapFieldEntry> {
        private static readonly pb::MessageParser<StringMapFieldEntry> _parser = new pb::MessageParser<StringMapFieldEntry>(() => new StringMapFieldEntry());
        public static pb::MessageParser<StringMapFieldEntry> Parser { get { return _parser; } }

        private static readonly string[] _fieldNames = new string[] { "key", "value" };
        private static readonly uint[] _fieldTags = new uint[] { 10, 18 };
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlResponse.Descriptor.NestedTypes[0]; }
        }

        pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
          get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.internal__static_ControlResponse_StringMapFieldEntry__FieldAccessorTable; }
        }

        private bool _frozen = false;
        public bool IsFrozen { get { return _frozen; } }

        public StringMapFieldEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        public StringMapFieldEntry(StringMapFieldEntry other) : this() {
          key_ = other.key_;
          value_ = other.value_;
        }

        public StringMapFieldEntry Clone() {
          return new StringMapFieldEntry(this);
        }

        public void Freeze() {
          if (IsFrozen) {
            return;
          }
          _frozen = true;
        }

        public const int KeyFieldNumber = 1;
        private string key_ = "";
        public string Key {
          get { return key_; }
          set {
            pb::Freezable.CheckMutable(this);
            key_ = value ?? "";
          }
        }

        public const int ValueFieldNumber = 2;
        private string value_ = "";
        public string Value {
          get { return value_; }
          set {
            pb::Freezable.CheckMutable(this);
            value_ = value ?? "";
          }
        }

        public override bool Equals(object other) {
          return Equals(other as StringMapFieldEntry);
        }

        public bool Equals(StringMapFieldEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (Value != other.Value) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Value);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          return size;
        }

        public void MergeFrom(StringMapFieldEntry other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while (input.ReadTag(out tag)) {
            switch(tag) {
              case 0:
                throw pb::InvalidProtocolBufferException.InvalidTag();
              default:
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
              case 18: {
                Value = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PingMessage : pb::IMessage<PingMessage> {
    private static readonly pb::MessageParser<PingMessage> _parser = new pb::MessageParser<PingMessage>(() => new PingMessage());
    public static pb::MessageParser<PingMessage> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] {  };
    private static readonly uint[] _fieldTags = new uint[] {  };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.Descriptor.MessageTypes[5]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.internal__static_PingMessage__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public PingMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PingMessage(PingMessage other) : this() {
    }

    public PingMessage Clone() {
      return new PingMessage(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public override bool Equals(object other) {
      return Equals(other as PingMessage);
    }

    public bool Equals(PingMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(PingMessage other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RPCRequest : pb::IMessage<RPCRequest> {
    private static readonly pb::MessageParser<RPCRequest> _parser = new pb::MessageParser<RPCRequest>(() => new RPCRequest());
    public static pb::MessageParser<RPCRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "cancelOpRequest", "controlRequest", "handshakeMessage", "operationRequest" };
    private static readonly uint[] _fieldTags = new uint[] { 34, 18, 10, 26 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.Descriptor.MessageTypes[6]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.internal__static_RPCRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public RPCRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RPCRequest(RPCRequest other) : this() {
      HandshakeMessage = other.handshakeMessage_ != null ? other.HandshakeMessage.Clone() : null;
      ControlRequest = other.controlRequest_ != null ? other.ControlRequest.Clone() : null;
      OperationRequest = other.operationRequest_ != null ? other.OperationRequest.Clone() : null;
      CancelOpRequest = other.cancelOpRequest_ != null ? other.CancelOpRequest.Clone() : null;
    }

    public RPCRequest Clone() {
      return new RPCRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (handshakeMessage_ != null) HandshakeMessage.Freeze();
      if (controlRequest_ != null) ControlRequest.Freeze();
      if (operationRequest_ != null) OperationRequest.Freeze();
      if (cancelOpRequest_ != null) CancelOpRequest.Freeze();
    }

    public const int HandshakeMessageFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage handshakeMessage_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage HandshakeMessage {
      get { return handshakeMessage_; }
      set {
        pb::Freezable.CheckMutable(this);
        handshakeMessage_ = value;
      }
    }

    public const int ControlRequestFieldNumber = 2;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlRequest controlRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlRequest ControlRequest {
      get { return controlRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        controlRequest_ = value;
      }
    }

    public const int OperationRequestFieldNumber = 3;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationRequest operationRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationRequest OperationRequest {
      get { return operationRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        operationRequest_ = value;
      }
    }

    public const int CancelOpRequestFieldNumber = 4;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CancelOpRequest cancelOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CancelOpRequest CancelOpRequest {
      get { return cancelOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        cancelOpRequest_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RPCRequest);
    }

    public bool Equals(RPCRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HandshakeMessage, other.HandshakeMessage)) return false;
      if (!object.Equals(ControlRequest, other.ControlRequest)) return false;
      if (!object.Equals(OperationRequest, other.OperationRequest)) return false;
      if (!object.Equals(CancelOpRequest, other.CancelOpRequest)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (handshakeMessage_ != null) hash ^= HandshakeMessage.GetHashCode();
      if (controlRequest_ != null) hash ^= ControlRequest.GetHashCode();
      if (operationRequest_ != null) hash ^= OperationRequest.GetHashCode();
      if (cancelOpRequest_ != null) hash ^= CancelOpRequest.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (handshakeMessage_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HandshakeMessage);
      }
      if (controlRequest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ControlRequest);
      }
      if (operationRequest_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OperationRequest);
      }
      if (cancelOpRequest_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CancelOpRequest);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (handshakeMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandshakeMessage);
      }
      if (controlRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlRequest);
      }
      if (operationRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OperationRequest);
      }
      if (cancelOpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelOpRequest);
      }
      return size;
    }

    public void MergeFrom(RPCRequest other) {
      if (other == null) {
        return;
      }
      if (other.handshakeMessage_ != null) {
        if (handshakeMessage_ == null) {
          handshakeMessage_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage();
        }
        HandshakeMessage.MergeFrom(other.HandshakeMessage);
      }
      if (other.controlRequest_ != null) {
        if (controlRequest_ == null) {
          controlRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlRequest();
        }
        ControlRequest.MergeFrom(other.ControlRequest);
      }
      if (other.operationRequest_ != null) {
        if (operationRequest_ == null) {
          operationRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationRequest();
        }
        OperationRequest.MergeFrom(other.OperationRequest);
      }
      if (other.cancelOpRequest_ != null) {
        if (cancelOpRequest_ == null) {
          cancelOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CancelOpRequest();
        }
        CancelOpRequest.MergeFrom(other.CancelOpRequest);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (handshakeMessage_ == null) {
              handshakeMessage_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage();
            }
            input.ReadMessage(handshakeMessage_);
            break;
          }
          case 18: {
            if (controlRequest_ == null) {
              controlRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlRequest();
            }
            input.ReadMessage(controlRequest_);
            break;
          }
          case 26: {
            if (operationRequest_ == null) {
              operationRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationRequest();
            }
            input.ReadMessage(operationRequest_);
            break;
          }
          case 34: {
            if (cancelOpRequest_ == null) {
              cancelOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CancelOpRequest();
            }
            input.ReadMessage(cancelOpRequest_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RPCResponse : pb::IMessage<RPCResponse> {
    private static readonly pb::MessageParser<RPCResponse> _parser = new pb::MessageParser<RPCResponse>(() => new RPCResponse());
    public static pb::MessageParser<RPCResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "controlResponse", "error", "handshakeMessage", "operationResponse" };
    private static readonly uint[] _fieldTags = new uint[] { 18, 34, 10, 26 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.Descriptor.MessageTypes[7]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.internal__static_RPCResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public RPCResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RPCResponse(RPCResponse other) : this() {
      HandshakeMessage = other.handshakeMessage_ != null ? other.HandshakeMessage.Clone() : null;
      ControlResponse = other.controlResponse_ != null ? other.ControlResponse.Clone() : null;
      OperationResponse = other.operationResponse_ != null ? other.OperationResponse.Clone() : null;
      Error = other.error_ != null ? other.Error.Clone() : null;
    }

    public RPCResponse Clone() {
      return new RPCResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (handshakeMessage_ != null) HandshakeMessage.Freeze();
      if (controlResponse_ != null) ControlResponse.Freeze();
      if (operationResponse_ != null) OperationResponse.Freeze();
      if (error_ != null) Error.Freeze();
    }

    public const int HandshakeMessageFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage handshakeMessage_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage HandshakeMessage {
      get { return handshakeMessage_; }
      set {
        pb::Freezable.CheckMutable(this);
        handshakeMessage_ = value;
      }
    }

    public const int ControlResponseFieldNumber = 2;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlResponse controlResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlResponse ControlResponse {
      get { return controlResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        controlResponse_ = value;
      }
    }

    public const int OperationResponseFieldNumber = 3;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationResponse operationResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationResponse OperationResponse {
      get { return operationResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        operationResponse_ = value;
      }
    }

    public const int ErrorFieldNumber = 4;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage error_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage Error {
      get { return error_; }
      set {
        pb::Freezable.CheckMutable(this);
        error_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RPCResponse);
    }

    public bool Equals(RPCResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HandshakeMessage, other.HandshakeMessage)) return false;
      if (!object.Equals(ControlResponse, other.ControlResponse)) return false;
      if (!object.Equals(OperationResponse, other.OperationResponse)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (handshakeMessage_ != null) hash ^= HandshakeMessage.GetHashCode();
      if (controlResponse_ != null) hash ^= ControlResponse.GetHashCode();
      if (operationResponse_ != null) hash ^= OperationResponse.GetHashCode();
      if (error_ != null) hash ^= Error.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (handshakeMessage_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HandshakeMessage);
      }
      if (controlResponse_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ControlResponse);
      }
      if (operationResponse_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OperationResponse);
      }
      if (error_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Error);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (handshakeMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandshakeMessage);
      }
      if (controlResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlResponse);
      }
      if (operationResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OperationResponse);
      }
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    public void MergeFrom(RPCResponse other) {
      if (other == null) {
        return;
      }
      if (other.handshakeMessage_ != null) {
        if (handshakeMessage_ == null) {
          handshakeMessage_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage();
        }
        HandshakeMessage.MergeFrom(other.HandshakeMessage);
      }
      if (other.controlResponse_ != null) {
        if (controlResponse_ == null) {
          controlResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlResponse();
        }
        ControlResponse.MergeFrom(other.ControlResponse);
      }
      if (other.operationResponse_ != null) {
        if (operationResponse_ == null) {
          operationResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationResponse();
        }
        OperationResponse.MergeFrom(other.OperationResponse);
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage();
        }
        Error.MergeFrom(other.Error);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (handshakeMessage_ == null) {
              handshakeMessage_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.HandshakeMessage();
            }
            input.ReadMessage(handshakeMessage_);
            break;
          }
          case 18: {
            if (controlResponse_ == null) {
              controlResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ControlResponse();
            }
            input.ReadMessage(controlResponse_);
            break;
          }
          case 26: {
            if (operationResponse_ == null) {
              operationResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationResponse();
            }
            input.ReadMessage(operationResponse_);
            break;
          }
          case 34: {
            if (error_ == null) {
              error_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ExceptionMessage();
            }
            input.ReadMessage(error_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RemoteMessage : pb::IMessage<RemoteMessage> {
    private static readonly pb::MessageParser<RemoteMessage> _parser = new pb::MessageParser<RemoteMessage>(() => new RemoteMessage());
    public static pb::MessageParser<RemoteMessage> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "messageId", "request", "response" };
    private static readonly uint[] _fieldTags = new uint[] { 8, 18, 26 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.Descriptor.MessageTypes[8]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCMessages.internal__static_RemoteMessage__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public RemoteMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RemoteMessage(RemoteMessage other) : this() {
      messageId_ = other.messageId_;
      Request = other.request_ != null ? other.Request.Clone() : null;
      Response = other.response_ != null ? other.Response.Clone() : null;
    }

    public RemoteMessage Clone() {
      return new RemoteMessage(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (request_ != null) Request.Freeze();
      if (response_ != null) Response.Freeze();
    }

    public const int MessageIdFieldNumber = 1;
    private long messageId_;
    public long MessageId {
      get { return messageId_; }
      set {
        pb::Freezable.CheckMutable(this);
        messageId_ = value;
      }
    }

    public const int RequestFieldNumber = 2;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCRequest request_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCRequest Request {
      get { return request_; }
      set {
        pb::Freezable.CheckMutable(this);
        request_ = value;
      }
    }

    public const int ResponseFieldNumber = 3;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCResponse response_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCResponse Response {
      get { return response_; }
      set {
        pb::Freezable.CheckMutable(this);
        response_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RemoteMessage);
    }

    public bool Equals(RemoteMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (MessageId != 0L) hash ^= MessageId.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      if (response_ != null) hash ^= Response.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MessageId);
      }
      if (request_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Request);
      }
      if (response_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Response);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MessageId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MessageId);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (response_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      return size;
    }

    public void MergeFrom(RemoteMessage other) {
      if (other == null) {
        return;
      }
      if (other.MessageId != 0L) {
        MessageId = other.MessageId;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCRequest();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.response_ != null) {
        if (response_ == null) {
          response_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCResponse();
        }
        Response.MergeFrom(other.Response);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 8: {
            MessageId = input.ReadInt64();
            break;
          }
          case 18: {
            if (request_ == null) {
              request_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCRequest();
            }
            input.ReadMessage(request_);
            break;
          }
          case 26: {
            if (response_ == null) {
              response_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.RPCResponse();
            }
            input.ReadMessage(response_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
