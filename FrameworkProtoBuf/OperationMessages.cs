// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OperationMessages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.ForgeRock.OpenICF.Common.ProtoBuf {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class OperationMessages {

    #region Static variables
    internal static pbr::FieldAccessorTable internal__static_AuthenticateOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_AuthenticateOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_BatchOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_BatchOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_CreateOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_CreateOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ConnectorEventSubscriptionOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ConnectorEventSubscriptionOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_DeleteOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_DeleteOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_GetOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_GetOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ResolveUsernameOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ResolveUsernameOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SchemaOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SchemaOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ScriptOnConnectorOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ScriptOnConnectorOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ScriptOnResourceOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ScriptOnResourceOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SearchOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SearchOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SyncOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SyncOpRequest_Sync__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SyncOpRequest_LatestSyncToken__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SyncOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SyncOpResponse_Sync__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SyncOpResponse_LatestSyncToken__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SyncEventSubscriptionOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SyncEventSubscriptionOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_TestOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_TestOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_UpdateOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_UpdateOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ValidateOpRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ValidateOpResponse__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ConfigurationChangeEvent__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_OperationRequest__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_OperationResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OperationMessages() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdPcGVyYXRpb25NZXNzYWdlcy5wcm90bxoaQ29tbW9uT2JqZWN0TWVzc2Fn", 
            "ZXMucHJvdG8iYQoVQXV0aGVudGljYXRlT3BSZXF1ZXN0EhMKC29iamVjdENs", 
            "YXNzGAEgASgJEhAKCHVzZXJuYW1lGAIgASgJEhAKCHBhc3N3b3JkGAMgASgM", 
            "Eg8KB29wdGlvbnMYBCABKAwiKwoWQXV0aGVudGljYXRlT3BSZXNwb25zZRIR", 
            "CgN1aWQYASABKAsyBC5VaWQiEAoOQmF0Y2hPcFJlcXVlc3QiEQoPQmF0Y2hP", 
            "cFJlc3BvbnNlIlEKD0NyZWF0ZU9wUmVxdWVzdBITCgtvYmplY3RDbGFzcxgB", 
            "IAEoCRIYChBjcmVhdGVBdHRyaWJ1dGVzGAIgASgMEg8KB29wdGlvbnMYAyAB", 
            "KAwiJQoQQ3JlYXRlT3BSZXNwb25zZRIRCgN1aWQYASABKAsyBC5VaWQiYAoj", 
            "Q29ubmVjdG9yRXZlbnRTdWJzY3JpcHRpb25PcFJlcXVlc3QSEwoLb2JqZWN0", 
            "Q2xhc3MYASABKAkSEwoLZXZlbnRGaWx0ZXIYAiABKAwSDwoHb3B0aW9ucxgD", 
            "IAEoDCJkCiRDb25uZWN0b3JFdmVudFN1YnNjcmlwdGlvbk9wUmVzcG9uc2US", 
            "KQoPY29ubmVjdG9yT2JqZWN0GAEgASgLMhAuQ29ubmVjdG9yT2JqZWN0EhEK", 
            "CWNvbXBsZXRlZBgCIAEoCCJKCg9EZWxldGVPcFJlcXVlc3QSEwoLb2JqZWN0", 
            "Q2xhc3MYASABKAkSEQoDdWlkGAIgASgLMgQuVWlkEg8KB29wdGlvbnMYAyAB", 
            "KAwiEgoQRGVsZXRlT3BSZXNwb25zZSJHCgxHZXRPcFJlcXVlc3QSEwoLb2Jq", 
            "ZWN0Q2xhc3MYASABKAkSEQoDdWlkGAIgASgLMgQuVWlkEg8KB29wdGlvbnMY", 
            "AyABKAwiKAoNR2V0T3BSZXNwb25zZRIXCg9jb25uZWN0b3JPYmplY3QYASAB", 
            "KAwiUgoYUmVzb2x2ZVVzZXJuYW1lT3BSZXF1ZXN0EhMKC29iamVjdENsYXNz", 
            "GAEgASgJEhAKCHVzZXJuYW1lGAIgASgJEg8KB29wdGlvbnMYAyABKAwiLgoZ", 
            "UmVzb2x2ZVVzZXJuYW1lT3BSZXNwb25zZRIRCgN1aWQYASABKAsyBC5VaWQi", 
            "EQoPU2NoZW1hT3BSZXF1ZXN0IiIKEFNjaGVtYU9wUmVzcG9uc2USDgoGc2No", 
            "ZW1hGAEgASgMIlQKGlNjcmlwdE9uQ29ubmVjdG9yT3BSZXF1ZXN0EiUKDXNj", 
            "cmlwdENvbnRleHQYASABKAsyDi5TY3JpcHRDb250ZXh0Eg8KB29wdGlvbnMY", 
            "AiABKAwiLQobU2NyaXB0T25Db25uZWN0b3JPcFJlc3BvbnNlEg4KBm9iamVj", 
            "dBgBIAEoDCJTChlTY3JpcHRPblJlc291cmNlT3BSZXF1ZXN0EiUKDXNjcmlw", 
            "dENvbnRleHQYASABKAsyDi5TY3JpcHRDb250ZXh0Eg8KB29wdGlvbnMYAiAB", 
            "KAwiLAoaU2NyaXB0T25SZXNvdXJjZU9wUmVzcG9uc2USDgoGb2JqZWN0GAEg", 
            "ASgMIkcKD1NlYXJjaE9wUmVxdWVzdBITCgtvYmplY3RDbGFzcxgBIAEoCRIO", 
            "CgZmaWx0ZXIYAiABKAwSDwoHb3B0aW9ucxgDIAEoDCJuChBTZWFyY2hPcFJl", 
            "c3BvbnNlEhAKCHNlcXVlbmNlGAEgASgDEh0KBnJlc3VsdBgCIAEoCzINLlNl", 
            "YXJjaFJlc3VsdBIpCg9jb25uZWN0b3JPYmplY3QYAyABKAsyEC5Db25uZWN0", 
            "b3JPYmplY3Qi3AEKDVN5bmNPcFJlcXVlc3QSIQoEc3luYxgBIAEoCzITLlN5", 
            "bmNPcFJlcXVlc3QuU3luYxI3Cg9sYXRlc3RTeW5jVG9rZW4YAiABKAsyHi5T", 
            "eW5jT3BSZXF1ZXN0LkxhdGVzdFN5bmNUb2tlbhpHCgRTeW5jEhMKC29iamVj", 
            "dENsYXNzGAEgASgJEhkKBXRva2VuGAIgASgLMgouU3luY1Rva2VuEg8KB29w", 
            "dGlvbnMYAyABKAwaJgoPTGF0ZXN0U3luY1Rva2VuEhMKC29iamVjdENsYXNz", 
            "GAEgASgJIvgBCg5TeW5jT3BSZXNwb25zZRIiCgRzeW5jGAEgASgLMhQuU3lu", 
            "Y09wUmVzcG9uc2UuU3luYxI4Cg9sYXRlc3RTeW5jVG9rZW4YAiABKAsyHy5T", 
            "eW5jT3BSZXNwb25zZS5MYXRlc3RTeW5jVG9rZW4aVgoEU3luYxIQCghzZXF1", 
            "ZW5jZRgBIAEoAxIdCglzeW5jVG9rZW4YAiABKAsyCi5TeW5jVG9rZW4SHQoJ", 
            "c3luY0RlbHRhGAMgASgLMgouU3luY0RlbHRhGjAKD0xhdGVzdFN5bmNUb2tl", 
            "bhIdCglzeW5jVG9rZW4YASABKAsyCi5TeW5jVG9rZW4iYQoeU3luY0V2ZW50", 
            "U3Vic2NyaXB0aW9uT3BSZXF1ZXN0EhMKC29iamVjdENsYXNzGAEgASgJEhkK", 
            "BXRva2VuGAIgASgLMgouU3luY1Rva2VuEg8KB29wdGlvbnMYAyABKAwiUwof", 
            "U3luY0V2ZW50U3Vic2NyaXB0aW9uT3BSZXNwb25zZRIdCglzeW5jRGVsdGEY", 
            "ASABKAsyCi5TeW5jRGVsdGESEQoJY29tcGxldGVkGAIgASgIIg8KDVRlc3RP", 
            "cFJlcXVlc3QiEAoOVGVzdE9wUmVzcG9uc2UixgEKD1VwZGF0ZU9wUmVxdWVz", 
            "dBITCgtvYmplY3RDbGFzcxgBIAEoCRIRCgN1aWQYAiABKAsyBC5VaWQSLwoK", 
            "dXBkYXRlVHlwZRgDIAEoDjIbLlVwZGF0ZU9wUmVxdWVzdC5VcGRhdGVUeXBl", 
            "EhkKEXJlcGxhY2VBdHRyaWJ1dGVzGAQgASgMEg8KB29wdGlvbnMYBSABKAwi", 
            "LgoKVXBkYXRlVHlwZRILCgdSRVBMQUNFEAASBwoDQUREEAESCgoGUkVNT1ZF", 
            "EAIiJQoQVXBkYXRlT3BSZXNwb25zZRIRCgN1aWQYASABKAsyBC5VaWQiEwoR", 
            "VmFsaWRhdGVPcFJlcXVlc3QiFAoSVmFsaWRhdGVPcFJlc3BvbnNlIj8KGENv", 
            "bmZpZ3VyYXRpb25DaGFuZ2VFdmVudBIjChtjb25maWd1cmF0aW9uUHJvcGVy", 
            "dHlDaGFuZ2UYASABKAwi2wcKEE9wZXJhdGlvblJlcXVlc3QSIwoMY29ubmVj", 
            "dG9yS2V5GAEgASgLMg0uQ29ubmVjdG9yS2V5EhoKEmNvbm5lY3RvckZhY2Fk", 
            "ZUtleRgCIAEoDBIXCgZsb2NhbGUYAyABKAsyBy5Mb2NhbGUSNQoVYXV0aGVu", 
            "dGljYXRlT3BSZXF1ZXN0GAQgASgLMhYuQXV0aGVudGljYXRlT3BSZXF1ZXN0", 
            "EicKDmJhdGNoT3BSZXF1ZXN0GAUgASgLMg8uQmF0Y2hPcFJlcXVlc3QSKQoP", 
            "Y3JlYXRlT3BSZXF1ZXN0GAYgASgLMhAuQ3JlYXRlT3BSZXF1ZXN0ElEKI2Nv", 
            "bm5lY3RvckV2ZW50U3Vic2NyaXB0aW9uT3BSZXF1ZXN0GAcgASgLMiQuQ29u", 
            "bmVjdG9yRXZlbnRTdWJzY3JpcHRpb25PcFJlcXVlc3QSKQoPZGVsZXRlT3BS", 
            "ZXF1ZXN0GAggASgLMhAuRGVsZXRlT3BSZXF1ZXN0EiMKDGdldE9wUmVxdWVz", 
            "dBgJIAEoCzINLkdldE9wUmVxdWVzdBI7ChhyZXNvbHZlVXNlcm5hbWVPcFJl", 
            "cXVlc3QYCiABKAsyGS5SZXNvbHZlVXNlcm5hbWVPcFJlcXVlc3QSKQoPc2No", 
            "ZW1hT3BSZXF1ZXN0GAsgASgLMhAuU2NoZW1hT3BSZXF1ZXN0Ej8KGnNjcmlw", 
            "dE9uQ29ubmVjdG9yT3BSZXF1ZXN0GAwgASgLMhsuU2NyaXB0T25Db25uZWN0", 
            "b3JPcFJlcXVlc3QSPQoZc2NyaXB0T25SZXNvdXJjZU9wUmVxdWVzdBgNIAEo", 
            "CzIaLlNjcmlwdE9uUmVzb3VyY2VPcFJlcXVlc3QSKQoPc2VhcmNoT3BSZXF1", 
            "ZXN0GA4gASgLMhAuU2VhcmNoT3BSZXF1ZXN0EiUKDXN5bmNPcFJlcXVlc3QY", 
            "DyABKAsyDi5TeW5jT3BSZXF1ZXN0EkcKHnN5bmNFdmVudFN1YnNjcmlwdGlv", 
            "bk9wUmVxdWVzdBgQIAEoCzIfLlN5bmNFdmVudFN1YnNjcmlwdGlvbk9wUmVx", 
            "dWVzdBIlCg10ZXN0T3BSZXF1ZXN0GBEgASgLMg4uVGVzdE9wUmVxdWVzdBIp", 
            "Cg91cGRhdGVPcFJlcXVlc3QYEiABKAsyEC5VcGRhdGVPcFJlcXVlc3QSLQoR", 
            "VmFsaWRhdGVPcFJlcXVlc3QYEyABKAsyEi5WYWxpZGF0ZU9wUmVxdWVzdBI7", 
            "Chhjb25maWd1cmF0aW9uQ2hhbmdlRXZlbnQYFCABKAsyGS5Db25maWd1cmF0", 
            "aW9uQ2hhbmdlRXZlbnQi5QYKEU9wZXJhdGlvblJlc3BvbnNlEjcKFmF1dGhl", 
            "bnRpY2F0ZU9wUmVzcG9uc2UYASABKAsyFy5BdXRoZW50aWNhdGVPcFJlc3Bv", 
            "bnNlEikKD2JhdGNoT3BSZXNwb25zZRgCIAEoCzIQLkJhdGNoT3BSZXNwb25z", 
            "ZRIrChBjcmVhdGVPcFJlc3BvbnNlGAMgASgLMhEuQ3JlYXRlT3BSZXNwb25z", 
            "ZRJTCiRjb25uZWN0b3JFdmVudFN1YnNjcmlwdGlvbk9wUmVzcG9uc2UYBCAB", 
            "KAsyJS5Db25uZWN0b3JFdmVudFN1YnNjcmlwdGlvbk9wUmVzcG9uc2USKwoQ", 
            "ZGVsZXRlT3BSZXNwb25zZRgFIAEoCzIRLkRlbGV0ZU9wUmVzcG9uc2USJQoN", 
            "R2V0T3BSZXNwb25zZRgGIAEoCzIOLkdldE9wUmVzcG9uc2USPQoZcmVzb2x2", 
            "ZVVzZXJuYW1lT3BSZXNwb25zZRgHIAEoCzIaLlJlc29sdmVVc2VybmFtZU9w", 
            "UmVzcG9uc2USKwoQc2NoZW1hT3BSZXNwb25zZRgIIAEoCzIRLlNjaGVtYU9w", 
            "UmVzcG9uc2USQQobc2NyaXB0T25Db25uZWN0b3JPcFJlc3BvbnNlGAkgASgL", 
            "MhwuU2NyaXB0T25Db25uZWN0b3JPcFJlc3BvbnNlEj8KGnNjcmlwdE9uUmVz", 
            "b3VyY2VPcFJlc3BvbnNlGAogASgLMhsuU2NyaXB0T25SZXNvdXJjZU9wUmVz", 
            "cG9uc2USKwoQc2VhcmNoT3BSZXNwb25zZRgLIAEoCzIRLlNlYXJjaE9wUmVz", 
            "cG9uc2USJwoOc3luY09wUmVzcG9uc2UYDCABKAsyDy5TeW5jT3BSZXNwb25z", 
            "ZRJJCh9zeW5jRXZlbnRTdWJzY3JpcHRpb25PcFJlc3BvbnNlGA0gASgLMiAu", 
            "U3luY0V2ZW50U3Vic2NyaXB0aW9uT3BSZXNwb25zZRInCg50ZXN0T3BSZXNw", 
            "b25zZRgOIAEoCzIPLlRlc3RPcFJlc3BvbnNlEisKEHVwZGF0ZU9wUmVzcG9u", 
            "c2UYDyABKAsyES5VcGRhdGVPcFJlc3BvbnNlEi8KEnZhbGlkYXRlT3BSZXNw", 
            "b25zZRgQIAEoCzITLlZhbGlkYXRlT3BSZXNwb25zZUIoqgIlT3JnLkZvcmdl", 
          "Um9jay5PcGVuSUNGLkNvbW1vbi5Qcm90b0J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] {
          global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.Descriptor, 
          });
      internal__static_AuthenticateOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.AuthenticateOpRequest), descriptor.MessageTypes[0],
              new string[] { "ObjectClass", "Username", "Password", "Options", }, new string[] { });
      internal__static_AuthenticateOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.AuthenticateOpResponse), descriptor.MessageTypes[1],
              new string[] { "Uid", }, new string[] { });
      internal__static_BatchOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.BatchOpRequest), descriptor.MessageTypes[2],
              new string[] { }, new string[] { });
      internal__static_BatchOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.BatchOpResponse), descriptor.MessageTypes[3],
              new string[] { }, new string[] { });
      internal__static_CreateOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CreateOpRequest), descriptor.MessageTypes[4],
              new string[] { "ObjectClass", "CreateAttributes", "Options", }, new string[] { });
      internal__static_CreateOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CreateOpResponse), descriptor.MessageTypes[5],
              new string[] { "Uid", }, new string[] { });
      internal__static_ConnectorEventSubscriptionOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorEventSubscriptionOpRequest), descriptor.MessageTypes[6],
              new string[] { "ObjectClass", "EventFilter", "Options", }, new string[] { });
      internal__static_ConnectorEventSubscriptionOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorEventSubscriptionOpResponse), descriptor.MessageTypes[7],
              new string[] { "ConnectorObject", "Completed", }, new string[] { });
      internal__static_DeleteOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.DeleteOpRequest), descriptor.MessageTypes[8],
              new string[] { "ObjectClass", "Uid", "Options", }, new string[] { });
      internal__static_DeleteOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.DeleteOpResponse), descriptor.MessageTypes[9],
              new string[] { }, new string[] { });
      internal__static_GetOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.GetOpRequest), descriptor.MessageTypes[10],
              new string[] { "ObjectClass", "Uid", "Options", }, new string[] { });
      internal__static_GetOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.GetOpResponse), descriptor.MessageTypes[11],
              new string[] { "ConnectorObject", }, new string[] { });
      internal__static_ResolveUsernameOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ResolveUsernameOpRequest), descriptor.MessageTypes[12],
              new string[] { "ObjectClass", "Username", "Options", }, new string[] { });
      internal__static_ResolveUsernameOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ResolveUsernameOpResponse), descriptor.MessageTypes[13],
              new string[] { "Uid", }, new string[] { });
      internal__static_SchemaOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SchemaOpRequest), descriptor.MessageTypes[14],
              new string[] { }, new string[] { });
      internal__static_SchemaOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SchemaOpResponse), descriptor.MessageTypes[15],
              new string[] { "Schema", }, new string[] { });
      internal__static_ScriptOnConnectorOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnConnectorOpRequest), descriptor.MessageTypes[16],
              new string[] { "ScriptContext", "Options", }, new string[] { });
      internal__static_ScriptOnConnectorOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnConnectorOpResponse), descriptor.MessageTypes[17],
              new string[] { "Object", }, new string[] { });
      internal__static_ScriptOnResourceOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnResourceOpRequest), descriptor.MessageTypes[18],
              new string[] { "ScriptContext", "Options", }, new string[] { });
      internal__static_ScriptOnResourceOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnResourceOpResponse), descriptor.MessageTypes[19],
              new string[] { "Object", }, new string[] { });
      internal__static_SearchOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchOpRequest), descriptor.MessageTypes[20],
              new string[] { "ObjectClass", "Filter", "Options", }, new string[] { });
      internal__static_SearchOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchOpResponse), descriptor.MessageTypes[21],
              new string[] { "Sequence", "Result", "ConnectorObject", }, new string[] { });
      internal__static_SyncOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest), descriptor.MessageTypes[22],
              new string[] { "Sync", "LatestSyncToken", }, new string[] { });
      internal__static_SyncOpRequest_Sync__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest.Types.Sync), descriptor.MessageTypes[22].NestedTypes[0],
              new string[] { "ObjectClass", "Token", "Options", }, new string[] { });
      internal__static_SyncOpRequest_LatestSyncToken__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest.Types.LatestSyncToken), descriptor.MessageTypes[22].NestedTypes[1],
              new string[] { "ObjectClass", }, new string[] { });
      internal__static_SyncOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse), descriptor.MessageTypes[23],
              new string[] { "Sync", "LatestSyncToken", }, new string[] { });
      internal__static_SyncOpResponse_Sync__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse.Types.Sync), descriptor.MessageTypes[23].NestedTypes[0],
              new string[] { "Sequence", "SyncToken", "SyncDelta", }, new string[] { });
      internal__static_SyncOpResponse_LatestSyncToken__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse.Types.LatestSyncToken), descriptor.MessageTypes[23].NestedTypes[1],
              new string[] { "SyncToken", }, new string[] { });
      internal__static_SyncEventSubscriptionOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncEventSubscriptionOpRequest), descriptor.MessageTypes[24],
              new string[] { "ObjectClass", "Token", "Options", }, new string[] { });
      internal__static_SyncEventSubscriptionOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncEventSubscriptionOpResponse), descriptor.MessageTypes[25],
              new string[] { "SyncDelta", "Completed", }, new string[] { });
      internal__static_TestOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.TestOpRequest), descriptor.MessageTypes[26],
              new string[] { }, new string[] { });
      internal__static_TestOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.TestOpResponse), descriptor.MessageTypes[27],
              new string[] { }, new string[] { });
      internal__static_UpdateOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpRequest), descriptor.MessageTypes[28],
              new string[] { "ObjectClass", "Uid", "UpdateType", "ReplaceAttributes", "Options", }, new string[] { });
      internal__static_UpdateOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpResponse), descriptor.MessageTypes[29],
              new string[] { "Uid", }, new string[] { });
      internal__static_ValidateOpRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ValidateOpRequest), descriptor.MessageTypes[30],
              new string[] { }, new string[] { });
      internal__static_ValidateOpResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ValidateOpResponse), descriptor.MessageTypes[31],
              new string[] { }, new string[] { });
      internal__static_ConfigurationChangeEvent__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConfigurationChangeEvent), descriptor.MessageTypes[32],
              new string[] { "ConfigurationPropertyChange", }, new string[] { });
      internal__static_OperationRequest__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationRequest), descriptor.MessageTypes[33],
              new string[] { "ConnectorKey", "ConnectorFacadeKey", "Locale", "AuthenticateOpRequest", "BatchOpRequest", "CreateOpRequest", "ConnectorEventSubscriptionOpRequest", "DeleteOpRequest", "GetOpRequest", "ResolveUsernameOpRequest", "SchemaOpRequest", "ScriptOnConnectorOpRequest", "ScriptOnResourceOpRequest", "SearchOpRequest", "SyncOpRequest", "SyncEventSubscriptionOpRequest", "TestOpRequest", "UpdateOpRequest", "ValidateOpRequest", "ConfigurationChangeEvent", }, new string[] { });
      internal__static_OperationResponse__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationResponse), descriptor.MessageTypes[34],
              new string[] { "AuthenticateOpResponse", "BatchOpResponse", "CreateOpResponse", "ConnectorEventSubscriptionOpResponse", "DeleteOpResponse", "GetOpResponse", "ResolveUsernameOpResponse", "SchemaOpResponse", "ScriptOnConnectorOpResponse", "ScriptOnResourceOpResponse", "SearchOpResponse", "SyncOpResponse", "SyncEventSubscriptionOpResponse", "TestOpResponse", "UpdateOpResponse", "ValidateOpResponse", }, new string[] { });
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AuthenticateOpRequest : pb::IMessage<AuthenticateOpRequest> {
    private static readonly pb::MessageParser<AuthenticateOpRequest> _parser = new pb::MessageParser<AuthenticateOpRequest>(() => new AuthenticateOpRequest());
    public static pb::MessageParser<AuthenticateOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "objectClass", "options", "password", "username" };
    private static readonly uint[] _fieldTags = new uint[] { 10, 34, 26, 18 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[0]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_AuthenticateOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public AuthenticateOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AuthenticateOpRequest(AuthenticateOpRequest other) : this() {
      objectClass_ = other.objectClass_;
      username_ = other.username_;
      password_ = other.password_;
      options_ = other.options_;
    }

    public AuthenticateOpRequest Clone() {
      return new AuthenticateOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int ObjectClassFieldNumber = 1;
    private string objectClass_ = "";
    public string ObjectClass {
      get { return objectClass_; }
      set {
        pb::Freezable.CheckMutable(this);
        objectClass_ = value ?? "";
      }
    }

    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    public string Username {
      get { return username_; }
      set {
        pb::Freezable.CheckMutable(this);
        username_ = value ?? "";
      }
    }

    public const int PasswordFieldNumber = 3;
    private pb::ByteString password_ = pb::ByteString.Empty;
    public pb::ByteString Password {
      get { return password_; }
      set {
        pb::Freezable.CheckMutable(this);
        password_ = value ?? pb::ByteString.Empty;
      }
    }

    public const int OptionsFieldNumber = 4;
    private pb::ByteString options_ = pb::ByteString.Empty;
    public pb::ByteString Options {
      get { return options_; }
      set {
        pb::Freezable.CheckMutable(this);
        options_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AuthenticateOpRequest);
    }

    public bool Equals(AuthenticateOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectClass != other.ObjectClass) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (Options != other.Options) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ObjectClass.Length != 0) hash ^= ObjectClass.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Options.Length != 0) hash ^= Options.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectClass.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectClass);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Password);
      }
      if (Options.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Options);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ObjectClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectClass);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
      }
      if (Options.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Options);
      }
      return size;
    }

    public void MergeFrom(AuthenticateOpRequest other) {
      if (other == null) {
        return;
      }
      if (other.ObjectClass.Length != 0) {
        ObjectClass = other.ObjectClass;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Options.Length != 0) {
        Options = other.Options;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ObjectClass = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadBytes();
            break;
          }
          case 34: {
            Options = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AuthenticateOpResponse : pb::IMessage<AuthenticateOpResponse> {
    private static readonly pb::MessageParser<AuthenticateOpResponse> _parser = new pb::MessageParser<AuthenticateOpResponse>(() => new AuthenticateOpResponse());
    public static pb::MessageParser<AuthenticateOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "uid" };
    private static readonly uint[] _fieldTags = new uint[] { 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[1]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_AuthenticateOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public AuthenticateOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AuthenticateOpResponse(AuthenticateOpResponse other) : this() {
      Uid = other.uid_ != null ? other.Uid.Clone() : null;
    }

    public AuthenticateOpResponse Clone() {
      return new AuthenticateOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (uid_ != null) Uid.Freeze();
    }

    public const int UidFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid uid_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid Uid {
      get { return uid_; }
      set {
        pb::Freezable.CheckMutable(this);
        uid_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as AuthenticateOpResponse);
    }

    public bool Equals(AuthenticateOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Uid, other.Uid)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (uid_ != null) hash ^= Uid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (uid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Uid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      return size;
    }

    public void MergeFrom(AuthenticateOpResponse other) {
      if (other == null) {
        return;
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
        }
        Uid.MergeFrom(other.Uid);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (uid_ == null) {
              uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
            }
            input.ReadMessage(uid_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BatchOpRequest : pb::IMessage<BatchOpRequest> {
    private static readonly pb::MessageParser<BatchOpRequest> _parser = new pb::MessageParser<BatchOpRequest>(() => new BatchOpRequest());
    public static pb::MessageParser<BatchOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] {  };
    private static readonly uint[] _fieldTags = new uint[] {  };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[2]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_BatchOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public BatchOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BatchOpRequest(BatchOpRequest other) : this() {
    }

    public BatchOpRequest Clone() {
      return new BatchOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public override bool Equals(object other) {
      return Equals(other as BatchOpRequest);
    }

    public bool Equals(BatchOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(BatchOpRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BatchOpResponse : pb::IMessage<BatchOpResponse> {
    private static readonly pb::MessageParser<BatchOpResponse> _parser = new pb::MessageParser<BatchOpResponse>(() => new BatchOpResponse());
    public static pb::MessageParser<BatchOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] {  };
    private static readonly uint[] _fieldTags = new uint[] {  };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[3]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_BatchOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public BatchOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BatchOpResponse(BatchOpResponse other) : this() {
    }

    public BatchOpResponse Clone() {
      return new BatchOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public override bool Equals(object other) {
      return Equals(other as BatchOpResponse);
    }

    public bool Equals(BatchOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(BatchOpResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreateOpRequest : pb::IMessage<CreateOpRequest> {
    private static readonly pb::MessageParser<CreateOpRequest> _parser = new pb::MessageParser<CreateOpRequest>(() => new CreateOpRequest());
    public static pb::MessageParser<CreateOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "createAttributes", "objectClass", "options" };
    private static readonly uint[] _fieldTags = new uint[] { 18, 10, 26 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[4]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_CreateOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public CreateOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CreateOpRequest(CreateOpRequest other) : this() {
      objectClass_ = other.objectClass_;
      createAttributes_ = other.createAttributes_;
      options_ = other.options_;
    }

    public CreateOpRequest Clone() {
      return new CreateOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int ObjectClassFieldNumber = 1;
    private string objectClass_ = "";
    public string ObjectClass {
      get { return objectClass_; }
      set {
        pb::Freezable.CheckMutable(this);
        objectClass_ = value ?? "";
      }
    }

    public const int CreateAttributesFieldNumber = 2;
    private pb::ByteString createAttributes_ = pb::ByteString.Empty;
    public pb::ByteString CreateAttributes {
      get { return createAttributes_; }
      set {
        pb::Freezable.CheckMutable(this);
        createAttributes_ = value ?? pb::ByteString.Empty;
      }
    }

    public const int OptionsFieldNumber = 3;
    private pb::ByteString options_ = pb::ByteString.Empty;
    public pb::ByteString Options {
      get { return options_; }
      set {
        pb::Freezable.CheckMutable(this);
        options_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CreateOpRequest);
    }

    public bool Equals(CreateOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectClass != other.ObjectClass) return false;
      if (CreateAttributes != other.CreateAttributes) return false;
      if (Options != other.Options) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ObjectClass.Length != 0) hash ^= ObjectClass.GetHashCode();
      if (CreateAttributes.Length != 0) hash ^= CreateAttributes.GetHashCode();
      if (Options.Length != 0) hash ^= Options.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectClass.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectClass);
      }
      if (CreateAttributes.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CreateAttributes);
      }
      if (Options.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Options);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ObjectClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectClass);
      }
      if (CreateAttributes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CreateAttributes);
      }
      if (Options.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Options);
      }
      return size;
    }

    public void MergeFrom(CreateOpRequest other) {
      if (other == null) {
        return;
      }
      if (other.ObjectClass.Length != 0) {
        ObjectClass = other.ObjectClass;
      }
      if (other.CreateAttributes.Length != 0) {
        CreateAttributes = other.CreateAttributes;
      }
      if (other.Options.Length != 0) {
        Options = other.Options;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ObjectClass = input.ReadString();
            break;
          }
          case 18: {
            CreateAttributes = input.ReadBytes();
            break;
          }
          case 26: {
            Options = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreateOpResponse : pb::IMessage<CreateOpResponse> {
    private static readonly pb::MessageParser<CreateOpResponse> _parser = new pb::MessageParser<CreateOpResponse>(() => new CreateOpResponse());
    public static pb::MessageParser<CreateOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "uid" };
    private static readonly uint[] _fieldTags = new uint[] { 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[5]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_CreateOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public CreateOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CreateOpResponse(CreateOpResponse other) : this() {
      Uid = other.uid_ != null ? other.Uid.Clone() : null;
    }

    public CreateOpResponse Clone() {
      return new CreateOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (uid_ != null) Uid.Freeze();
    }

    public const int UidFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid uid_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid Uid {
      get { return uid_; }
      set {
        pb::Freezable.CheckMutable(this);
        uid_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CreateOpResponse);
    }

    public bool Equals(CreateOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Uid, other.Uid)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (uid_ != null) hash ^= Uid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (uid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Uid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      return size;
    }

    public void MergeFrom(CreateOpResponse other) {
      if (other == null) {
        return;
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
        }
        Uid.MergeFrom(other.Uid);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (uid_ == null) {
              uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
            }
            input.ReadMessage(uid_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConnectorEventSubscriptionOpRequest : pb::IMessage<ConnectorEventSubscriptionOpRequest> {
    private static readonly pb::MessageParser<ConnectorEventSubscriptionOpRequest> _parser = new pb::MessageParser<ConnectorEventSubscriptionOpRequest>(() => new ConnectorEventSubscriptionOpRequest());
    public static pb::MessageParser<ConnectorEventSubscriptionOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "eventFilter", "objectClass", "options" };
    private static readonly uint[] _fieldTags = new uint[] { 18, 10, 26 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[6]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_ConnectorEventSubscriptionOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ConnectorEventSubscriptionOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ConnectorEventSubscriptionOpRequest(ConnectorEventSubscriptionOpRequest other) : this() {
      objectClass_ = other.objectClass_;
      eventFilter_ = other.eventFilter_;
      options_ = other.options_;
    }

    public ConnectorEventSubscriptionOpRequest Clone() {
      return new ConnectorEventSubscriptionOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int ObjectClassFieldNumber = 1;
    private string objectClass_ = "";
    public string ObjectClass {
      get { return objectClass_; }
      set {
        pb::Freezable.CheckMutable(this);
        objectClass_ = value ?? "";
      }
    }

    public const int EventFilterFieldNumber = 2;
    private pb::ByteString eventFilter_ = pb::ByteString.Empty;
    public pb::ByteString EventFilter {
      get { return eventFilter_; }
      set {
        pb::Freezable.CheckMutable(this);
        eventFilter_ = value ?? pb::ByteString.Empty;
      }
    }

    public const int OptionsFieldNumber = 3;
    private pb::ByteString options_ = pb::ByteString.Empty;
    public pb::ByteString Options {
      get { return options_; }
      set {
        pb::Freezable.CheckMutable(this);
        options_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ConnectorEventSubscriptionOpRequest);
    }

    public bool Equals(ConnectorEventSubscriptionOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectClass != other.ObjectClass) return false;
      if (EventFilter != other.EventFilter) return false;
      if (Options != other.Options) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ObjectClass.Length != 0) hash ^= ObjectClass.GetHashCode();
      if (EventFilter.Length != 0) hash ^= EventFilter.GetHashCode();
      if (Options.Length != 0) hash ^= Options.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectClass.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectClass);
      }
      if (EventFilter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EventFilter);
      }
      if (Options.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Options);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ObjectClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectClass);
      }
      if (EventFilter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EventFilter);
      }
      if (Options.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Options);
      }
      return size;
    }

    public void MergeFrom(ConnectorEventSubscriptionOpRequest other) {
      if (other == null) {
        return;
      }
      if (other.ObjectClass.Length != 0) {
        ObjectClass = other.ObjectClass;
      }
      if (other.EventFilter.Length != 0) {
        EventFilter = other.EventFilter;
      }
      if (other.Options.Length != 0) {
        Options = other.Options;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ObjectClass = input.ReadString();
            break;
          }
          case 18: {
            EventFilter = input.ReadBytes();
            break;
          }
          case 26: {
            Options = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConnectorEventSubscriptionOpResponse : pb::IMessage<ConnectorEventSubscriptionOpResponse> {
    private static readonly pb::MessageParser<ConnectorEventSubscriptionOpResponse> _parser = new pb::MessageParser<ConnectorEventSubscriptionOpResponse>(() => new ConnectorEventSubscriptionOpResponse());
    public static pb::MessageParser<ConnectorEventSubscriptionOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "completed", "connectorObject" };
    private static readonly uint[] _fieldTags = new uint[] { 16, 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[7]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_ConnectorEventSubscriptionOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ConnectorEventSubscriptionOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ConnectorEventSubscriptionOpResponse(ConnectorEventSubscriptionOpResponse other) : this() {
      ConnectorObject = other.connectorObject_ != null ? other.ConnectorObject.Clone() : null;
      completed_ = other.completed_;
    }

    public ConnectorEventSubscriptionOpResponse Clone() {
      return new ConnectorEventSubscriptionOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (connectorObject_ != null) ConnectorObject.Freeze();
    }

    public const int ConnectorObjectFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorObject connectorObject_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorObject ConnectorObject {
      get { return connectorObject_; }
      set {
        pb::Freezable.CheckMutable(this);
        connectorObject_ = value;
      }
    }

    public const int CompletedFieldNumber = 2;
    private bool completed_;
    public bool Completed {
      get { return completed_; }
      set {
        pb::Freezable.CheckMutable(this);
        completed_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ConnectorEventSubscriptionOpResponse);
    }

    public bool Equals(ConnectorEventSubscriptionOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ConnectorObject, other.ConnectorObject)) return false;
      if (Completed != other.Completed) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (connectorObject_ != null) hash ^= ConnectorObject.GetHashCode();
      if (Completed != false) hash ^= Completed.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (connectorObject_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConnectorObject);
      }
      if (Completed != false) {
        output.WriteRawTag(16);
        output.WriteBool(Completed);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (connectorObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectorObject);
      }
      if (Completed != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(ConnectorEventSubscriptionOpResponse other) {
      if (other == null) {
        return;
      }
      if (other.connectorObject_ != null) {
        if (connectorObject_ == null) {
          connectorObject_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorObject();
        }
        ConnectorObject.MergeFrom(other.ConnectorObject);
      }
      if (other.Completed != false) {
        Completed = other.Completed;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (connectorObject_ == null) {
              connectorObject_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorObject();
            }
            input.ReadMessage(connectorObject_);
            break;
          }
          case 16: {
            Completed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DeleteOpRequest : pb::IMessage<DeleteOpRequest> {
    private static readonly pb::MessageParser<DeleteOpRequest> _parser = new pb::MessageParser<DeleteOpRequest>(() => new DeleteOpRequest());
    public static pb::MessageParser<DeleteOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "objectClass", "options", "uid" };
    private static readonly uint[] _fieldTags = new uint[] { 10, 26, 18 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[8]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_DeleteOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public DeleteOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DeleteOpRequest(DeleteOpRequest other) : this() {
      objectClass_ = other.objectClass_;
      Uid = other.uid_ != null ? other.Uid.Clone() : null;
      options_ = other.options_;
    }

    public DeleteOpRequest Clone() {
      return new DeleteOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (uid_ != null) Uid.Freeze();
    }

    public const int ObjectClassFieldNumber = 1;
    private string objectClass_ = "";
    public string ObjectClass {
      get { return objectClass_; }
      set {
        pb::Freezable.CheckMutable(this);
        objectClass_ = value ?? "";
      }
    }

    public const int UidFieldNumber = 2;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid uid_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid Uid {
      get { return uid_; }
      set {
        pb::Freezable.CheckMutable(this);
        uid_ = value;
      }
    }

    public const int OptionsFieldNumber = 3;
    private pb::ByteString options_ = pb::ByteString.Empty;
    public pb::ByteString Options {
      get { return options_; }
      set {
        pb::Freezable.CheckMutable(this);
        options_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as DeleteOpRequest);
    }

    public bool Equals(DeleteOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectClass != other.ObjectClass) return false;
      if (!object.Equals(Uid, other.Uid)) return false;
      if (Options != other.Options) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ObjectClass.Length != 0) hash ^= ObjectClass.GetHashCode();
      if (uid_ != null) hash ^= Uid.GetHashCode();
      if (Options.Length != 0) hash ^= Options.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectClass.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectClass);
      }
      if (uid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Uid);
      }
      if (Options.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Options);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ObjectClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectClass);
      }
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      if (Options.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Options);
      }
      return size;
    }

    public void MergeFrom(DeleteOpRequest other) {
      if (other == null) {
        return;
      }
      if (other.ObjectClass.Length != 0) {
        ObjectClass = other.ObjectClass;
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
        }
        Uid.MergeFrom(other.Uid);
      }
      if (other.Options.Length != 0) {
        Options = other.Options;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ObjectClass = input.ReadString();
            break;
          }
          case 18: {
            if (uid_ == null) {
              uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
            }
            input.ReadMessage(uid_);
            break;
          }
          case 26: {
            Options = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DeleteOpResponse : pb::IMessage<DeleteOpResponse> {
    private static readonly pb::MessageParser<DeleteOpResponse> _parser = new pb::MessageParser<DeleteOpResponse>(() => new DeleteOpResponse());
    public static pb::MessageParser<DeleteOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] {  };
    private static readonly uint[] _fieldTags = new uint[] {  };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[9]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_DeleteOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public DeleteOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DeleteOpResponse(DeleteOpResponse other) : this() {
    }

    public DeleteOpResponse Clone() {
      return new DeleteOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public override bool Equals(object other) {
      return Equals(other as DeleteOpResponse);
    }

    public bool Equals(DeleteOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(DeleteOpResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetOpRequest : pb::IMessage<GetOpRequest> {
    private static readonly pb::MessageParser<GetOpRequest> _parser = new pb::MessageParser<GetOpRequest>(() => new GetOpRequest());
    public static pb::MessageParser<GetOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "objectClass", "options", "uid" };
    private static readonly uint[] _fieldTags = new uint[] { 10, 26, 18 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[10]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_GetOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public GetOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetOpRequest(GetOpRequest other) : this() {
      objectClass_ = other.objectClass_;
      Uid = other.uid_ != null ? other.Uid.Clone() : null;
      options_ = other.options_;
    }

    public GetOpRequest Clone() {
      return new GetOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (uid_ != null) Uid.Freeze();
    }

    public const int ObjectClassFieldNumber = 1;
    private string objectClass_ = "";
    public string ObjectClass {
      get { return objectClass_; }
      set {
        pb::Freezable.CheckMutable(this);
        objectClass_ = value ?? "";
      }
    }

    public const int UidFieldNumber = 2;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid uid_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid Uid {
      get { return uid_; }
      set {
        pb::Freezable.CheckMutable(this);
        uid_ = value;
      }
    }

    public const int OptionsFieldNumber = 3;
    private pb::ByteString options_ = pb::ByteString.Empty;
    public pb::ByteString Options {
      get { return options_; }
      set {
        pb::Freezable.CheckMutable(this);
        options_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetOpRequest);
    }

    public bool Equals(GetOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectClass != other.ObjectClass) return false;
      if (!object.Equals(Uid, other.Uid)) return false;
      if (Options != other.Options) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ObjectClass.Length != 0) hash ^= ObjectClass.GetHashCode();
      if (uid_ != null) hash ^= Uid.GetHashCode();
      if (Options.Length != 0) hash ^= Options.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectClass.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectClass);
      }
      if (uid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Uid);
      }
      if (Options.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Options);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ObjectClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectClass);
      }
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      if (Options.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Options);
      }
      return size;
    }

    public void MergeFrom(GetOpRequest other) {
      if (other == null) {
        return;
      }
      if (other.ObjectClass.Length != 0) {
        ObjectClass = other.ObjectClass;
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
        }
        Uid.MergeFrom(other.Uid);
      }
      if (other.Options.Length != 0) {
        Options = other.Options;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ObjectClass = input.ReadString();
            break;
          }
          case 18: {
            if (uid_ == null) {
              uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
            }
            input.ReadMessage(uid_);
            break;
          }
          case 26: {
            Options = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetOpResponse : pb::IMessage<GetOpResponse> {
    private static readonly pb::MessageParser<GetOpResponse> _parser = new pb::MessageParser<GetOpResponse>(() => new GetOpResponse());
    public static pb::MessageParser<GetOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "connectorObject" };
    private static readonly uint[] _fieldTags = new uint[] { 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[11]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_GetOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public GetOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetOpResponse(GetOpResponse other) : this() {
      connectorObject_ = other.connectorObject_;
    }

    public GetOpResponse Clone() {
      return new GetOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int ConnectorObjectFieldNumber = 1;
    private pb::ByteString connectorObject_ = pb::ByteString.Empty;
    public pb::ByteString ConnectorObject {
      get { return connectorObject_; }
      set {
        pb::Freezable.CheckMutable(this);
        connectorObject_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GetOpResponse);
    }

    public bool Equals(GetOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConnectorObject != other.ConnectorObject) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConnectorObject.Length != 0) hash ^= ConnectorObject.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConnectorObject.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ConnectorObject);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConnectorObject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConnectorObject);
      }
      return size;
    }

    public void MergeFrom(GetOpResponse other) {
      if (other == null) {
        return;
      }
      if (other.ConnectorObject.Length != 0) {
        ConnectorObject = other.ConnectorObject;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ConnectorObject = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ResolveUsernameOpRequest : pb::IMessage<ResolveUsernameOpRequest> {
    private static readonly pb::MessageParser<ResolveUsernameOpRequest> _parser = new pb::MessageParser<ResolveUsernameOpRequest>(() => new ResolveUsernameOpRequest());
    public static pb::MessageParser<ResolveUsernameOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "objectClass", "options", "username" };
    private static readonly uint[] _fieldTags = new uint[] { 10, 26, 18 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[12]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_ResolveUsernameOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ResolveUsernameOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ResolveUsernameOpRequest(ResolveUsernameOpRequest other) : this() {
      objectClass_ = other.objectClass_;
      username_ = other.username_;
      options_ = other.options_;
    }

    public ResolveUsernameOpRequest Clone() {
      return new ResolveUsernameOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int ObjectClassFieldNumber = 1;
    private string objectClass_ = "";
    public string ObjectClass {
      get { return objectClass_; }
      set {
        pb::Freezable.CheckMutable(this);
        objectClass_ = value ?? "";
      }
    }

    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    public string Username {
      get { return username_; }
      set {
        pb::Freezable.CheckMutable(this);
        username_ = value ?? "";
      }
    }

    public const int OptionsFieldNumber = 3;
    private pb::ByteString options_ = pb::ByteString.Empty;
    public pb::ByteString Options {
      get { return options_; }
      set {
        pb::Freezable.CheckMutable(this);
        options_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ResolveUsernameOpRequest);
    }

    public bool Equals(ResolveUsernameOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectClass != other.ObjectClass) return false;
      if (Username != other.Username) return false;
      if (Options != other.Options) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ObjectClass.Length != 0) hash ^= ObjectClass.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Options.Length != 0) hash ^= Options.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectClass.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectClass);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Options.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Options);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ObjectClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectClass);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Options.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Options);
      }
      return size;
    }

    public void MergeFrom(ResolveUsernameOpRequest other) {
      if (other == null) {
        return;
      }
      if (other.ObjectClass.Length != 0) {
        ObjectClass = other.ObjectClass;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Options.Length != 0) {
        Options = other.Options;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ObjectClass = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Options = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ResolveUsernameOpResponse : pb::IMessage<ResolveUsernameOpResponse> {
    private static readonly pb::MessageParser<ResolveUsernameOpResponse> _parser = new pb::MessageParser<ResolveUsernameOpResponse>(() => new ResolveUsernameOpResponse());
    public static pb::MessageParser<ResolveUsernameOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "uid" };
    private static readonly uint[] _fieldTags = new uint[] { 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[13]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_ResolveUsernameOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ResolveUsernameOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ResolveUsernameOpResponse(ResolveUsernameOpResponse other) : this() {
      Uid = other.uid_ != null ? other.Uid.Clone() : null;
    }

    public ResolveUsernameOpResponse Clone() {
      return new ResolveUsernameOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (uid_ != null) Uid.Freeze();
    }

    public const int UidFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid uid_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid Uid {
      get { return uid_; }
      set {
        pb::Freezable.CheckMutable(this);
        uid_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ResolveUsernameOpResponse);
    }

    public bool Equals(ResolveUsernameOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Uid, other.Uid)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (uid_ != null) hash ^= Uid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (uid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Uid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      return size;
    }

    public void MergeFrom(ResolveUsernameOpResponse other) {
      if (other == null) {
        return;
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
        }
        Uid.MergeFrom(other.Uid);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (uid_ == null) {
              uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
            }
            input.ReadMessage(uid_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SchemaOpRequest : pb::IMessage<SchemaOpRequest> {
    private static readonly pb::MessageParser<SchemaOpRequest> _parser = new pb::MessageParser<SchemaOpRequest>(() => new SchemaOpRequest());
    public static pb::MessageParser<SchemaOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] {  };
    private static readonly uint[] _fieldTags = new uint[] {  };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[14]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_SchemaOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public SchemaOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SchemaOpRequest(SchemaOpRequest other) : this() {
    }

    public SchemaOpRequest Clone() {
      return new SchemaOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public override bool Equals(object other) {
      return Equals(other as SchemaOpRequest);
    }

    public bool Equals(SchemaOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(SchemaOpRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SchemaOpResponse : pb::IMessage<SchemaOpResponse> {
    private static readonly pb::MessageParser<SchemaOpResponse> _parser = new pb::MessageParser<SchemaOpResponse>(() => new SchemaOpResponse());
    public static pb::MessageParser<SchemaOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "schema" };
    private static readonly uint[] _fieldTags = new uint[] { 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[15]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_SchemaOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public SchemaOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SchemaOpResponse(SchemaOpResponse other) : this() {
      schema_ = other.schema_;
    }

    public SchemaOpResponse Clone() {
      return new SchemaOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int SchemaFieldNumber = 1;
    private pb::ByteString schema_ = pb::ByteString.Empty;
    public pb::ByteString Schema {
      get { return schema_; }
      set {
        pb::Freezable.CheckMutable(this);
        schema_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SchemaOpResponse);
    }

    public bool Equals(SchemaOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Schema != other.Schema) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Schema.Length != 0) hash ^= Schema.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Schema.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Schema);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Schema.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Schema);
      }
      return size;
    }

    public void MergeFrom(SchemaOpResponse other) {
      if (other == null) {
        return;
      }
      if (other.Schema.Length != 0) {
        Schema = other.Schema;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            Schema = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ScriptOnConnectorOpRequest : pb::IMessage<ScriptOnConnectorOpRequest> {
    private static readonly pb::MessageParser<ScriptOnConnectorOpRequest> _parser = new pb::MessageParser<ScriptOnConnectorOpRequest>(() => new ScriptOnConnectorOpRequest());
    public static pb::MessageParser<ScriptOnConnectorOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "options", "scriptContext" };
    private static readonly uint[] _fieldTags = new uint[] { 18, 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[16]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_ScriptOnConnectorOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ScriptOnConnectorOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ScriptOnConnectorOpRequest(ScriptOnConnectorOpRequest other) : this() {
      ScriptContext = other.scriptContext_ != null ? other.ScriptContext.Clone() : null;
      options_ = other.options_;
    }

    public ScriptOnConnectorOpRequest Clone() {
      return new ScriptOnConnectorOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (scriptContext_ != null) ScriptContext.Freeze();
    }

    public const int ScriptContextFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptContext scriptContext_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptContext ScriptContext {
      get { return scriptContext_; }
      set {
        pb::Freezable.CheckMutable(this);
        scriptContext_ = value;
      }
    }

    public const int OptionsFieldNumber = 2;
    private pb::ByteString options_ = pb::ByteString.Empty;
    public pb::ByteString Options {
      get { return options_; }
      set {
        pb::Freezable.CheckMutable(this);
        options_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ScriptOnConnectorOpRequest);
    }

    public bool Equals(ScriptOnConnectorOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ScriptContext, other.ScriptContext)) return false;
      if (Options != other.Options) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (scriptContext_ != null) hash ^= ScriptContext.GetHashCode();
      if (Options.Length != 0) hash ^= Options.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (scriptContext_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ScriptContext);
      }
      if (Options.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Options);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (scriptContext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScriptContext);
      }
      if (Options.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Options);
      }
      return size;
    }

    public void MergeFrom(ScriptOnConnectorOpRequest other) {
      if (other == null) {
        return;
      }
      if (other.scriptContext_ != null) {
        if (scriptContext_ == null) {
          scriptContext_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptContext();
        }
        ScriptContext.MergeFrom(other.ScriptContext);
      }
      if (other.Options.Length != 0) {
        Options = other.Options;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (scriptContext_ == null) {
              scriptContext_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptContext();
            }
            input.ReadMessage(scriptContext_);
            break;
          }
          case 18: {
            Options = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ScriptOnConnectorOpResponse : pb::IMessage<ScriptOnConnectorOpResponse> {
    private static readonly pb::MessageParser<ScriptOnConnectorOpResponse> _parser = new pb::MessageParser<ScriptOnConnectorOpResponse>(() => new ScriptOnConnectorOpResponse());
    public static pb::MessageParser<ScriptOnConnectorOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "object" };
    private static readonly uint[] _fieldTags = new uint[] { 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[17]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_ScriptOnConnectorOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ScriptOnConnectorOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ScriptOnConnectorOpResponse(ScriptOnConnectorOpResponse other) : this() {
      object_ = other.object_;
    }

    public ScriptOnConnectorOpResponse Clone() {
      return new ScriptOnConnectorOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int ObjectFieldNumber = 1;
    private pb::ByteString object_ = pb::ByteString.Empty;
    public pb::ByteString Object {
      get { return object_; }
      set {
        pb::Freezable.CheckMutable(this);
        object_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ScriptOnConnectorOpResponse);
    }

    public bool Equals(ScriptOnConnectorOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Object != other.Object) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Object.Length != 0) hash ^= Object.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Object.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Object);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Object.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Object);
      }
      return size;
    }

    public void MergeFrom(ScriptOnConnectorOpResponse other) {
      if (other == null) {
        return;
      }
      if (other.Object.Length != 0) {
        Object = other.Object;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            Object = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ScriptOnResourceOpRequest : pb::IMessage<ScriptOnResourceOpRequest> {
    private static readonly pb::MessageParser<ScriptOnResourceOpRequest> _parser = new pb::MessageParser<ScriptOnResourceOpRequest>(() => new ScriptOnResourceOpRequest());
    public static pb::MessageParser<ScriptOnResourceOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "options", "scriptContext" };
    private static readonly uint[] _fieldTags = new uint[] { 18, 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[18]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_ScriptOnResourceOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ScriptOnResourceOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ScriptOnResourceOpRequest(ScriptOnResourceOpRequest other) : this() {
      ScriptContext = other.scriptContext_ != null ? other.ScriptContext.Clone() : null;
      options_ = other.options_;
    }

    public ScriptOnResourceOpRequest Clone() {
      return new ScriptOnResourceOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (scriptContext_ != null) ScriptContext.Freeze();
    }

    public const int ScriptContextFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptContext scriptContext_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptContext ScriptContext {
      get { return scriptContext_; }
      set {
        pb::Freezable.CheckMutable(this);
        scriptContext_ = value;
      }
    }

    public const int OptionsFieldNumber = 2;
    private pb::ByteString options_ = pb::ByteString.Empty;
    public pb::ByteString Options {
      get { return options_; }
      set {
        pb::Freezable.CheckMutable(this);
        options_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ScriptOnResourceOpRequest);
    }

    public bool Equals(ScriptOnResourceOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ScriptContext, other.ScriptContext)) return false;
      if (Options != other.Options) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (scriptContext_ != null) hash ^= ScriptContext.GetHashCode();
      if (Options.Length != 0) hash ^= Options.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (scriptContext_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ScriptContext);
      }
      if (Options.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Options);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (scriptContext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScriptContext);
      }
      if (Options.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Options);
      }
      return size;
    }

    public void MergeFrom(ScriptOnResourceOpRequest other) {
      if (other == null) {
        return;
      }
      if (other.scriptContext_ != null) {
        if (scriptContext_ == null) {
          scriptContext_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptContext();
        }
        ScriptContext.MergeFrom(other.ScriptContext);
      }
      if (other.Options.Length != 0) {
        Options = other.Options;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (scriptContext_ == null) {
              scriptContext_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptContext();
            }
            input.ReadMessage(scriptContext_);
            break;
          }
          case 18: {
            Options = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ScriptOnResourceOpResponse : pb::IMessage<ScriptOnResourceOpResponse> {
    private static readonly pb::MessageParser<ScriptOnResourceOpResponse> _parser = new pb::MessageParser<ScriptOnResourceOpResponse>(() => new ScriptOnResourceOpResponse());
    public static pb::MessageParser<ScriptOnResourceOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "object" };
    private static readonly uint[] _fieldTags = new uint[] { 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[19]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_ScriptOnResourceOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ScriptOnResourceOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ScriptOnResourceOpResponse(ScriptOnResourceOpResponse other) : this() {
      object_ = other.object_;
    }

    public ScriptOnResourceOpResponse Clone() {
      return new ScriptOnResourceOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int ObjectFieldNumber = 1;
    private pb::ByteString object_ = pb::ByteString.Empty;
    public pb::ByteString Object {
      get { return object_; }
      set {
        pb::Freezable.CheckMutable(this);
        object_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ScriptOnResourceOpResponse);
    }

    public bool Equals(ScriptOnResourceOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Object != other.Object) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Object.Length != 0) hash ^= Object.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Object.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Object);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Object.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Object);
      }
      return size;
    }

    public void MergeFrom(ScriptOnResourceOpResponse other) {
      if (other == null) {
        return;
      }
      if (other.Object.Length != 0) {
        Object = other.Object;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            Object = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SearchOpRequest : pb::IMessage<SearchOpRequest> {
    private static readonly pb::MessageParser<SearchOpRequest> _parser = new pb::MessageParser<SearchOpRequest>(() => new SearchOpRequest());
    public static pb::MessageParser<SearchOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "filter", "objectClass", "options" };
    private static readonly uint[] _fieldTags = new uint[] { 18, 10, 26 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[20]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_SearchOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public SearchOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SearchOpRequest(SearchOpRequest other) : this() {
      objectClass_ = other.objectClass_;
      filter_ = other.filter_;
      options_ = other.options_;
    }

    public SearchOpRequest Clone() {
      return new SearchOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int ObjectClassFieldNumber = 1;
    private string objectClass_ = "";
    public string ObjectClass {
      get { return objectClass_; }
      set {
        pb::Freezable.CheckMutable(this);
        objectClass_ = value ?? "";
      }
    }

    public const int FilterFieldNumber = 2;
    private pb::ByteString filter_ = pb::ByteString.Empty;
    public pb::ByteString Filter {
      get { return filter_; }
      set {
        pb::Freezable.CheckMutable(this);
        filter_ = value ?? pb::ByteString.Empty;
      }
    }

    public const int OptionsFieldNumber = 3;
    private pb::ByteString options_ = pb::ByteString.Empty;
    public pb::ByteString Options {
      get { return options_; }
      set {
        pb::Freezable.CheckMutable(this);
        options_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SearchOpRequest);
    }

    public bool Equals(SearchOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectClass != other.ObjectClass) return false;
      if (Filter != other.Filter) return false;
      if (Options != other.Options) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ObjectClass.Length != 0) hash ^= ObjectClass.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (Options.Length != 0) hash ^= Options.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectClass.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectClass);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Filter);
      }
      if (Options.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Options);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ObjectClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectClass);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Filter);
      }
      if (Options.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Options);
      }
      return size;
    }

    public void MergeFrom(SearchOpRequest other) {
      if (other == null) {
        return;
      }
      if (other.ObjectClass.Length != 0) {
        ObjectClass = other.ObjectClass;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.Options.Length != 0) {
        Options = other.Options;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ObjectClass = input.ReadString();
            break;
          }
          case 18: {
            Filter = input.ReadBytes();
            break;
          }
          case 26: {
            Options = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SearchOpResponse : pb::IMessage<SearchOpResponse> {
    private static readonly pb::MessageParser<SearchOpResponse> _parser = new pb::MessageParser<SearchOpResponse>(() => new SearchOpResponse());
    public static pb::MessageParser<SearchOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "connectorObject", "result", "sequence" };
    private static readonly uint[] _fieldTags = new uint[] { 26, 18, 8 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[21]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_SearchOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public SearchOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SearchOpResponse(SearchOpResponse other) : this() {
      sequence_ = other.sequence_;
      Result = other.result_ != null ? other.Result.Clone() : null;
      ConnectorObject = other.connectorObject_ != null ? other.ConnectorObject.Clone() : null;
    }

    public SearchOpResponse Clone() {
      return new SearchOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (result_ != null) Result.Freeze();
      if (connectorObject_ != null) ConnectorObject.Freeze();
    }

    public const int SequenceFieldNumber = 1;
    private long sequence_;
    public long Sequence {
      get { return sequence_; }
      set {
        pb::Freezable.CheckMutable(this);
        sequence_ = value;
      }
    }

    public const int ResultFieldNumber = 2;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchResult result_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchResult Result {
      get { return result_; }
      set {
        pb::Freezable.CheckMutable(this);
        result_ = value;
      }
    }

    public const int ConnectorObjectFieldNumber = 3;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorObject connectorObject_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorObject ConnectorObject {
      get { return connectorObject_; }
      set {
        pb::Freezable.CheckMutable(this);
        connectorObject_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SearchOpResponse);
    }

    public bool Equals(SearchOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sequence != other.Sequence) return false;
      if (!object.Equals(Result, other.Result)) return false;
      if (!object.Equals(ConnectorObject, other.ConnectorObject)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Sequence != 0L) hash ^= Sequence.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (connectorObject_ != null) hash ^= ConnectorObject.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Sequence != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Sequence);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (connectorObject_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ConnectorObject);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Sequence != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sequence);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (connectorObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectorObject);
      }
      return size;
    }

    public void MergeFrom(SearchOpResponse other) {
      if (other == null) {
        return;
      }
      if (other.Sequence != 0L) {
        Sequence = other.Sequence;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchResult();
        }
        Result.MergeFrom(other.Result);
      }
      if (other.connectorObject_ != null) {
        if (connectorObject_ == null) {
          connectorObject_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorObject();
        }
        ConnectorObject.MergeFrom(other.ConnectorObject);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 8: {
            Sequence = input.ReadInt64();
            break;
          }
          case 18: {
            if (result_ == null) {
              result_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchResult();
            }
            input.ReadMessage(result_);
            break;
          }
          case 26: {
            if (connectorObject_ == null) {
              connectorObject_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorObject();
            }
            input.ReadMessage(connectorObject_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SyncOpRequest : pb::IMessage<SyncOpRequest> {
    private static readonly pb::MessageParser<SyncOpRequest> _parser = new pb::MessageParser<SyncOpRequest>(() => new SyncOpRequest());
    public static pb::MessageParser<SyncOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "latestSyncToken", "sync" };
    private static readonly uint[] _fieldTags = new uint[] { 18, 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[22]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_SyncOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public SyncOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SyncOpRequest(SyncOpRequest other) : this() {
      Sync = other.sync_ != null ? other.Sync.Clone() : null;
      LatestSyncToken = other.latestSyncToken_ != null ? other.LatestSyncToken.Clone() : null;
    }

    public SyncOpRequest Clone() {
      return new SyncOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (sync_ != null) Sync.Freeze();
      if (latestSyncToken_ != null) LatestSyncToken.Freeze();
    }

    public const int SyncFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest.Types.Sync sync_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest.Types.Sync Sync {
      get { return sync_; }
      set {
        pb::Freezable.CheckMutable(this);
        sync_ = value;
      }
    }

    public const int LatestSyncTokenFieldNumber = 2;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest.Types.LatestSyncToken latestSyncToken_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest.Types.LatestSyncToken LatestSyncToken {
      get { return latestSyncToken_; }
      set {
        pb::Freezable.CheckMutable(this);
        latestSyncToken_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SyncOpRequest);
    }

    public bool Equals(SyncOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Sync, other.Sync)) return false;
      if (!object.Equals(LatestSyncToken, other.LatestSyncToken)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (sync_ != null) hash ^= Sync.GetHashCode();
      if (latestSyncToken_ != null) hash ^= LatestSyncToken.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (sync_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Sync);
      }
      if (latestSyncToken_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LatestSyncToken);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (sync_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sync);
      }
      if (latestSyncToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LatestSyncToken);
      }
      return size;
    }

    public void MergeFrom(SyncOpRequest other) {
      if (other == null) {
        return;
      }
      if (other.sync_ != null) {
        if (sync_ == null) {
          sync_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest.Types.Sync();
        }
        Sync.MergeFrom(other.Sync);
      }
      if (other.latestSyncToken_ != null) {
        if (latestSyncToken_ == null) {
          latestSyncToken_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest.Types.LatestSyncToken();
        }
        LatestSyncToken.MergeFrom(other.LatestSyncToken);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (sync_ == null) {
              sync_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest.Types.Sync();
            }
            input.ReadMessage(sync_);
            break;
          }
          case 18: {
            if (latestSyncToken_ == null) {
              latestSyncToken_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest.Types.LatestSyncToken();
            }
            input.ReadMessage(latestSyncToken_);
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Sync : pb::IMessage<Sync> {
        private static readonly pb::MessageParser<Sync> _parser = new pb::MessageParser<Sync>(() => new Sync());
        public static pb::MessageParser<Sync> Parser { get { return _parser; } }

        private static readonly string[] _fieldNames = new string[] { "objectClass", "options", "token" };
        private static readonly uint[] _fieldTags = new uint[] { 10, 26, 18 };
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest.Descriptor.NestedTypes[0]; }
        }

        pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
          get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_SyncOpRequest_Sync__FieldAccessorTable; }
        }

        private bool _frozen = false;
        public bool IsFrozen { get { return _frozen; } }

        public Sync() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Sync(Sync other) : this() {
          objectClass_ = other.objectClass_;
          Token = other.token_ != null ? other.Token.Clone() : null;
          options_ = other.options_;
        }

        public Sync Clone() {
          return new Sync(this);
        }

        public void Freeze() {
          if (IsFrozen) {
            return;
          }
          _frozen = true;
          if (token_ != null) Token.Freeze();
        }

        public const int ObjectClassFieldNumber = 1;
        private string objectClass_ = "";
        public string ObjectClass {
          get { return objectClass_; }
          set {
            pb::Freezable.CheckMutable(this);
            objectClass_ = value ?? "";
          }
        }

        public const int TokenFieldNumber = 2;
        private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken token_;
        public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken Token {
          get { return token_; }
          set {
            pb::Freezable.CheckMutable(this);
            token_ = value;
          }
        }

        public const int OptionsFieldNumber = 3;
        private pb::ByteString options_ = pb::ByteString.Empty;
        public pb::ByteString Options {
          get { return options_; }
          set {
            pb::Freezable.CheckMutable(this);
            options_ = value ?? pb::ByteString.Empty;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as Sync);
        }

        public bool Equals(Sync other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ObjectClass != other.ObjectClass) return false;
          if (!object.Equals(Token, other.Token)) return false;
          if (Options != other.Options) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (ObjectClass.Length != 0) hash ^= ObjectClass.GetHashCode();
          if (token_ != null) hash ^= Token.GetHashCode();
          if (Options.Length != 0) hash ^= Options.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (ObjectClass.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ObjectClass);
          }
          if (token_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Token);
          }
          if (Options.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(Options);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (ObjectClass.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectClass);
          }
          if (token_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Token);
          }
          if (Options.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Options);
          }
          return size;
        }

        public void MergeFrom(Sync other) {
          if (other == null) {
            return;
          }
          if (other.ObjectClass.Length != 0) {
            ObjectClass = other.ObjectClass;
          }
          if (other.token_ != null) {
            if (token_ == null) {
              token_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken();
            }
            Token.MergeFrom(other.Token);
          }
          if (other.Options.Length != 0) {
            Options = other.Options;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while (input.ReadTag(out tag)) {
            switch(tag) {
              case 0:
                throw pb::InvalidProtocolBufferException.InvalidTag();
              default:
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              case 10: {
                ObjectClass = input.ReadString();
                break;
              }
              case 18: {
                if (token_ == null) {
                  token_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken();
                }
                input.ReadMessage(token_);
                break;
              }
              case 26: {
                Options = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class LatestSyncToken : pb::IMessage<LatestSyncToken> {
        private static readonly pb::MessageParser<LatestSyncToken> _parser = new pb::MessageParser<LatestSyncToken>(() => new LatestSyncToken());
        public static pb::MessageParser<LatestSyncToken> Parser { get { return _parser; } }

        private static readonly string[] _fieldNames = new string[] { "objectClass" };
        private static readonly uint[] _fieldTags = new uint[] { 10 };
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest.Descriptor.NestedTypes[1]; }
        }

        pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
          get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_SyncOpRequest_LatestSyncToken__FieldAccessorTable; }
        }

        private bool _frozen = false;
        public bool IsFrozen { get { return _frozen; } }

        public LatestSyncToken() {
          OnConstruction();
        }

        partial void OnConstruction();

        public LatestSyncToken(LatestSyncToken other) : this() {
          objectClass_ = other.objectClass_;
        }

        public LatestSyncToken Clone() {
          return new LatestSyncToken(this);
        }

        public void Freeze() {
          if (IsFrozen) {
            return;
          }
          _frozen = true;
        }

        public const int ObjectClassFieldNumber = 1;
        private string objectClass_ = "";
        public string ObjectClass {
          get { return objectClass_; }
          set {
            pb::Freezable.CheckMutable(this);
            objectClass_ = value ?? "";
          }
        }

        public override bool Equals(object other) {
          return Equals(other as LatestSyncToken);
        }

        public bool Equals(LatestSyncToken other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ObjectClass != other.ObjectClass) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (ObjectClass.Length != 0) hash ^= ObjectClass.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (ObjectClass.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ObjectClass);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (ObjectClass.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectClass);
          }
          return size;
        }

        public void MergeFrom(LatestSyncToken other) {
          if (other == null) {
            return;
          }
          if (other.ObjectClass.Length != 0) {
            ObjectClass = other.ObjectClass;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while (input.ReadTag(out tag)) {
            switch(tag) {
              case 0:
                throw pb::InvalidProtocolBufferException.InvalidTag();
              default:
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              case 10: {
                ObjectClass = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SyncOpResponse : pb::IMessage<SyncOpResponse> {
    private static readonly pb::MessageParser<SyncOpResponse> _parser = new pb::MessageParser<SyncOpResponse>(() => new SyncOpResponse());
    public static pb::MessageParser<SyncOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "latestSyncToken", "sync" };
    private static readonly uint[] _fieldTags = new uint[] { 18, 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[23]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_SyncOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public SyncOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SyncOpResponse(SyncOpResponse other) : this() {
      Sync = other.sync_ != null ? other.Sync.Clone() : null;
      LatestSyncToken = other.latestSyncToken_ != null ? other.LatestSyncToken.Clone() : null;
    }

    public SyncOpResponse Clone() {
      return new SyncOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (sync_ != null) Sync.Freeze();
      if (latestSyncToken_ != null) LatestSyncToken.Freeze();
    }

    public const int SyncFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse.Types.Sync sync_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse.Types.Sync Sync {
      get { return sync_; }
      set {
        pb::Freezable.CheckMutable(this);
        sync_ = value;
      }
    }

    public const int LatestSyncTokenFieldNumber = 2;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse.Types.LatestSyncToken latestSyncToken_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse.Types.LatestSyncToken LatestSyncToken {
      get { return latestSyncToken_; }
      set {
        pb::Freezable.CheckMutable(this);
        latestSyncToken_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SyncOpResponse);
    }

    public bool Equals(SyncOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Sync, other.Sync)) return false;
      if (!object.Equals(LatestSyncToken, other.LatestSyncToken)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (sync_ != null) hash ^= Sync.GetHashCode();
      if (latestSyncToken_ != null) hash ^= LatestSyncToken.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (sync_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Sync);
      }
      if (latestSyncToken_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LatestSyncToken);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (sync_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sync);
      }
      if (latestSyncToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LatestSyncToken);
      }
      return size;
    }

    public void MergeFrom(SyncOpResponse other) {
      if (other == null) {
        return;
      }
      if (other.sync_ != null) {
        if (sync_ == null) {
          sync_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse.Types.Sync();
        }
        Sync.MergeFrom(other.Sync);
      }
      if (other.latestSyncToken_ != null) {
        if (latestSyncToken_ == null) {
          latestSyncToken_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse.Types.LatestSyncToken();
        }
        LatestSyncToken.MergeFrom(other.LatestSyncToken);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (sync_ == null) {
              sync_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse.Types.Sync();
            }
            input.ReadMessage(sync_);
            break;
          }
          case 18: {
            if (latestSyncToken_ == null) {
              latestSyncToken_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse.Types.LatestSyncToken();
            }
            input.ReadMessage(latestSyncToken_);
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Sync : pb::IMessage<Sync> {
        private static readonly pb::MessageParser<Sync> _parser = new pb::MessageParser<Sync>(() => new Sync());
        public static pb::MessageParser<Sync> Parser { get { return _parser; } }

        private static readonly string[] _fieldNames = new string[] { "sequence", "syncDelta", "syncToken" };
        private static readonly uint[] _fieldTags = new uint[] { 8, 26, 18 };
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse.Descriptor.NestedTypes[0]; }
        }

        pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
          get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_SyncOpResponse_Sync__FieldAccessorTable; }
        }

        private bool _frozen = false;
        public bool IsFrozen { get { return _frozen; } }

        public Sync() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Sync(Sync other) : this() {
          sequence_ = other.sequence_;
          SyncToken = other.syncToken_ != null ? other.SyncToken.Clone() : null;
          SyncDelta = other.syncDelta_ != null ? other.SyncDelta.Clone() : null;
        }

        public Sync Clone() {
          return new Sync(this);
        }

        public void Freeze() {
          if (IsFrozen) {
            return;
          }
          _frozen = true;
          if (syncToken_ != null) SyncToken.Freeze();
          if (syncDelta_ != null) SyncDelta.Freeze();
        }

        public const int SequenceFieldNumber = 1;
        private long sequence_;
        public long Sequence {
          get { return sequence_; }
          set {
            pb::Freezable.CheckMutable(this);
            sequence_ = value;
          }
        }

        public const int SyncTokenFieldNumber = 2;
        private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken syncToken_;
        public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken SyncToken {
          get { return syncToken_; }
          set {
            pb::Freezable.CheckMutable(this);
            syncToken_ = value;
          }
        }

        public const int SyncDeltaFieldNumber = 3;
        private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta syncDelta_;
        public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta SyncDelta {
          get { return syncDelta_; }
          set {
            pb::Freezable.CheckMutable(this);
            syncDelta_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as Sync);
        }

        public bool Equals(Sync other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Sequence != other.Sequence) return false;
          if (!object.Equals(SyncToken, other.SyncToken)) return false;
          if (!object.Equals(SyncDelta, other.SyncDelta)) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Sequence != 0L) hash ^= Sequence.GetHashCode();
          if (syncToken_ != null) hash ^= SyncToken.GetHashCode();
          if (syncDelta_ != null) hash ^= SyncDelta.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Sequence != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Sequence);
          }
          if (syncToken_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(SyncToken);
          }
          if (syncDelta_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(SyncDelta);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Sequence != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sequence);
          }
          if (syncToken_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncToken);
          }
          if (syncDelta_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncDelta);
          }
          return size;
        }

        public void MergeFrom(Sync other) {
          if (other == null) {
            return;
          }
          if (other.Sequence != 0L) {
            Sequence = other.Sequence;
          }
          if (other.syncToken_ != null) {
            if (syncToken_ == null) {
              syncToken_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken();
            }
            SyncToken.MergeFrom(other.SyncToken);
          }
          if (other.syncDelta_ != null) {
            if (syncDelta_ == null) {
              syncDelta_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta();
            }
            SyncDelta.MergeFrom(other.SyncDelta);
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while (input.ReadTag(out tag)) {
            switch(tag) {
              case 0:
                throw pb::InvalidProtocolBufferException.InvalidTag();
              default:
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              case 8: {
                Sequence = input.ReadInt64();
                break;
              }
              case 18: {
                if (syncToken_ == null) {
                  syncToken_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken();
                }
                input.ReadMessage(syncToken_);
                break;
              }
              case 26: {
                if (syncDelta_ == null) {
                  syncDelta_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta();
                }
                input.ReadMessage(syncDelta_);
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class LatestSyncToken : pb::IMessage<LatestSyncToken> {
        private static readonly pb::MessageParser<LatestSyncToken> _parser = new pb::MessageParser<LatestSyncToken>(() => new LatestSyncToken());
        public static pb::MessageParser<LatestSyncToken> Parser { get { return _parser; } }

        private static readonly string[] _fieldNames = new string[] { "syncToken" };
        private static readonly uint[] _fieldTags = new uint[] { 10 };
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse.Descriptor.NestedTypes[1]; }
        }

        pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
          get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_SyncOpResponse_LatestSyncToken__FieldAccessorTable; }
        }

        private bool _frozen = false;
        public bool IsFrozen { get { return _frozen; } }

        public LatestSyncToken() {
          OnConstruction();
        }

        partial void OnConstruction();

        public LatestSyncToken(LatestSyncToken other) : this() {
          SyncToken = other.syncToken_ != null ? other.SyncToken.Clone() : null;
        }

        public LatestSyncToken Clone() {
          return new LatestSyncToken(this);
        }

        public void Freeze() {
          if (IsFrozen) {
            return;
          }
          _frozen = true;
          if (syncToken_ != null) SyncToken.Freeze();
        }

        public const int SyncTokenFieldNumber = 1;
        private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken syncToken_;
        public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken SyncToken {
          get { return syncToken_; }
          set {
            pb::Freezable.CheckMutable(this);
            syncToken_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as LatestSyncToken);
        }

        public bool Equals(LatestSyncToken other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(SyncToken, other.SyncToken)) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (syncToken_ != null) hash ^= SyncToken.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (syncToken_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(SyncToken);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (syncToken_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncToken);
          }
          return size;
        }

        public void MergeFrom(LatestSyncToken other) {
          if (other == null) {
            return;
          }
          if (other.syncToken_ != null) {
            if (syncToken_ == null) {
              syncToken_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken();
            }
            SyncToken.MergeFrom(other.SyncToken);
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while (input.ReadTag(out tag)) {
            switch(tag) {
              case 0:
                throw pb::InvalidProtocolBufferException.InvalidTag();
              default:
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  return;
                }
                break;
              case 10: {
                if (syncToken_ == null) {
                  syncToken_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken();
                }
                input.ReadMessage(syncToken_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SyncEventSubscriptionOpRequest : pb::IMessage<SyncEventSubscriptionOpRequest> {
    private static readonly pb::MessageParser<SyncEventSubscriptionOpRequest> _parser = new pb::MessageParser<SyncEventSubscriptionOpRequest>(() => new SyncEventSubscriptionOpRequest());
    public static pb::MessageParser<SyncEventSubscriptionOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "objectClass", "options", "token" };
    private static readonly uint[] _fieldTags = new uint[] { 10, 26, 18 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[24]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_SyncEventSubscriptionOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public SyncEventSubscriptionOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SyncEventSubscriptionOpRequest(SyncEventSubscriptionOpRequest other) : this() {
      objectClass_ = other.objectClass_;
      Token = other.token_ != null ? other.Token.Clone() : null;
      options_ = other.options_;
    }

    public SyncEventSubscriptionOpRequest Clone() {
      return new SyncEventSubscriptionOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (token_ != null) Token.Freeze();
    }

    public const int ObjectClassFieldNumber = 1;
    private string objectClass_ = "";
    public string ObjectClass {
      get { return objectClass_; }
      set {
        pb::Freezable.CheckMutable(this);
        objectClass_ = value ?? "";
      }
    }

    public const int TokenFieldNumber = 2;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken token_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken Token {
      get { return token_; }
      set {
        pb::Freezable.CheckMutable(this);
        token_ = value;
      }
    }

    public const int OptionsFieldNumber = 3;
    private pb::ByteString options_ = pb::ByteString.Empty;
    public pb::ByteString Options {
      get { return options_; }
      set {
        pb::Freezable.CheckMutable(this);
        options_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SyncEventSubscriptionOpRequest);
    }

    public bool Equals(SyncEventSubscriptionOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectClass != other.ObjectClass) return false;
      if (!object.Equals(Token, other.Token)) return false;
      if (Options != other.Options) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ObjectClass.Length != 0) hash ^= ObjectClass.GetHashCode();
      if (token_ != null) hash ^= Token.GetHashCode();
      if (Options.Length != 0) hash ^= Options.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectClass.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectClass);
      }
      if (token_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Token);
      }
      if (Options.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Options);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ObjectClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectClass);
      }
      if (token_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Token);
      }
      if (Options.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Options);
      }
      return size;
    }

    public void MergeFrom(SyncEventSubscriptionOpRequest other) {
      if (other == null) {
        return;
      }
      if (other.ObjectClass.Length != 0) {
        ObjectClass = other.ObjectClass;
      }
      if (other.token_ != null) {
        if (token_ == null) {
          token_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken();
        }
        Token.MergeFrom(other.Token);
      }
      if (other.Options.Length != 0) {
        Options = other.Options;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ObjectClass = input.ReadString();
            break;
          }
          case 18: {
            if (token_ == null) {
              token_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken();
            }
            input.ReadMessage(token_);
            break;
          }
          case 26: {
            Options = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SyncEventSubscriptionOpResponse : pb::IMessage<SyncEventSubscriptionOpResponse> {
    private static readonly pb::MessageParser<SyncEventSubscriptionOpResponse> _parser = new pb::MessageParser<SyncEventSubscriptionOpResponse>(() => new SyncEventSubscriptionOpResponse());
    public static pb::MessageParser<SyncEventSubscriptionOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "completed", "syncDelta" };
    private static readonly uint[] _fieldTags = new uint[] { 16, 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[25]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_SyncEventSubscriptionOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public SyncEventSubscriptionOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SyncEventSubscriptionOpResponse(SyncEventSubscriptionOpResponse other) : this() {
      SyncDelta = other.syncDelta_ != null ? other.SyncDelta.Clone() : null;
      completed_ = other.completed_;
    }

    public SyncEventSubscriptionOpResponse Clone() {
      return new SyncEventSubscriptionOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (syncDelta_ != null) SyncDelta.Freeze();
    }

    public const int SyncDeltaFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta syncDelta_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta SyncDelta {
      get { return syncDelta_; }
      set {
        pb::Freezable.CheckMutable(this);
        syncDelta_ = value;
      }
    }

    public const int CompletedFieldNumber = 2;
    private bool completed_;
    public bool Completed {
      get { return completed_; }
      set {
        pb::Freezable.CheckMutable(this);
        completed_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SyncEventSubscriptionOpResponse);
    }

    public bool Equals(SyncEventSubscriptionOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SyncDelta, other.SyncDelta)) return false;
      if (Completed != other.Completed) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (syncDelta_ != null) hash ^= SyncDelta.GetHashCode();
      if (Completed != false) hash ^= Completed.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (syncDelta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SyncDelta);
      }
      if (Completed != false) {
        output.WriteRawTag(16);
        output.WriteBool(Completed);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (syncDelta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncDelta);
      }
      if (Completed != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(SyncEventSubscriptionOpResponse other) {
      if (other == null) {
        return;
      }
      if (other.syncDelta_ != null) {
        if (syncDelta_ == null) {
          syncDelta_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta();
        }
        SyncDelta.MergeFrom(other.SyncDelta);
      }
      if (other.Completed != false) {
        Completed = other.Completed;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (syncDelta_ == null) {
              syncDelta_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta();
            }
            input.ReadMessage(syncDelta_);
            break;
          }
          case 16: {
            Completed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TestOpRequest : pb::IMessage<TestOpRequest> {
    private static readonly pb::MessageParser<TestOpRequest> _parser = new pb::MessageParser<TestOpRequest>(() => new TestOpRequest());
    public static pb::MessageParser<TestOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] {  };
    private static readonly uint[] _fieldTags = new uint[] {  };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[26]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_TestOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public TestOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TestOpRequest(TestOpRequest other) : this() {
    }

    public TestOpRequest Clone() {
      return new TestOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public override bool Equals(object other) {
      return Equals(other as TestOpRequest);
    }

    public bool Equals(TestOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(TestOpRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TestOpResponse : pb::IMessage<TestOpResponse> {
    private static readonly pb::MessageParser<TestOpResponse> _parser = new pb::MessageParser<TestOpResponse>(() => new TestOpResponse());
    public static pb::MessageParser<TestOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] {  };
    private static readonly uint[] _fieldTags = new uint[] {  };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[27]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_TestOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public TestOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TestOpResponse(TestOpResponse other) : this() {
    }

    public TestOpResponse Clone() {
      return new TestOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public override bool Equals(object other) {
      return Equals(other as TestOpResponse);
    }

    public bool Equals(TestOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(TestOpResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UpdateOpRequest : pb::IMessage<UpdateOpRequest> {
    private static readonly pb::MessageParser<UpdateOpRequest> _parser = new pb::MessageParser<UpdateOpRequest>(() => new UpdateOpRequest());
    public static pb::MessageParser<UpdateOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "objectClass", "options", "replaceAttributes", "uid", "updateType" };
    private static readonly uint[] _fieldTags = new uint[] { 10, 42, 34, 18, 24 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[28]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_UpdateOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public UpdateOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UpdateOpRequest(UpdateOpRequest other) : this() {
      objectClass_ = other.objectClass_;
      Uid = other.uid_ != null ? other.Uid.Clone() : null;
      updateType_ = other.updateType_;
      replaceAttributes_ = other.replaceAttributes_;
      options_ = other.options_;
    }

    public UpdateOpRequest Clone() {
      return new UpdateOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (uid_ != null) Uid.Freeze();
    }

    public const int ObjectClassFieldNumber = 1;
    private string objectClass_ = "";
    public string ObjectClass {
      get { return objectClass_; }
      set {
        pb::Freezable.CheckMutable(this);
        objectClass_ = value ?? "";
      }
    }

    public const int UidFieldNumber = 2;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid uid_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid Uid {
      get { return uid_; }
      set {
        pb::Freezable.CheckMutable(this);
        uid_ = value;
      }
    }

    public const int UpdateTypeFieldNumber = 3;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpRequest.Types.UpdateType updateType_ = global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpRequest.Types.UpdateType.REPLACE;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpRequest.Types.UpdateType UpdateType {
      get { return updateType_; }
      set {
        pb::Freezable.CheckMutable(this);
        updateType_ = value;
      }
    }

    public const int ReplaceAttributesFieldNumber = 4;
    private pb::ByteString replaceAttributes_ = pb::ByteString.Empty;
    public pb::ByteString ReplaceAttributes {
      get { return replaceAttributes_; }
      set {
        pb::Freezable.CheckMutable(this);
        replaceAttributes_ = value ?? pb::ByteString.Empty;
      }
    }

    public const int OptionsFieldNumber = 5;
    private pb::ByteString options_ = pb::ByteString.Empty;
    public pb::ByteString Options {
      get { return options_; }
      set {
        pb::Freezable.CheckMutable(this);
        options_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UpdateOpRequest);
    }

    public bool Equals(UpdateOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectClass != other.ObjectClass) return false;
      if (!object.Equals(Uid, other.Uid)) return false;
      if (UpdateType != other.UpdateType) return false;
      if (ReplaceAttributes != other.ReplaceAttributes) return false;
      if (Options != other.Options) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ObjectClass.Length != 0) hash ^= ObjectClass.GetHashCode();
      if (uid_ != null) hash ^= Uid.GetHashCode();
      if (UpdateType != global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpRequest.Types.UpdateType.REPLACE) hash ^= UpdateType.GetHashCode();
      if (ReplaceAttributes.Length != 0) hash ^= ReplaceAttributes.GetHashCode();
      if (Options.Length != 0) hash ^= Options.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectClass.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectClass);
      }
      if (uid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Uid);
      }
      if (UpdateType != global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpRequest.Types.UpdateType.REPLACE) {
        output.WriteRawTag(24);
        output.WriteEnum((int) UpdateType);
      }
      if (ReplaceAttributes.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ReplaceAttributes);
      }
      if (Options.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Options);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ObjectClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectClass);
      }
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      if (UpdateType != global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpRequest.Types.UpdateType.REPLACE) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UpdateType);
      }
      if (ReplaceAttributes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReplaceAttributes);
      }
      if (Options.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Options);
      }
      return size;
    }

    public void MergeFrom(UpdateOpRequest other) {
      if (other == null) {
        return;
      }
      if (other.ObjectClass.Length != 0) {
        ObjectClass = other.ObjectClass;
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
        }
        Uid.MergeFrom(other.Uid);
      }
      if (other.UpdateType != global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpRequest.Types.UpdateType.REPLACE) {
        UpdateType = other.UpdateType;
      }
      if (other.ReplaceAttributes.Length != 0) {
        ReplaceAttributes = other.ReplaceAttributes;
      }
      if (other.Options.Length != 0) {
        Options = other.Options;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ObjectClass = input.ReadString();
            break;
          }
          case 18: {
            if (uid_ == null) {
              uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
            }
            input.ReadMessage(uid_);
            break;
          }
          case 24: {
            updateType_ = (global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpRequest.Types.UpdateType) input.ReadEnum();
            break;
          }
          case 34: {
            ReplaceAttributes = input.ReadBytes();
            break;
          }
          case 42: {
            Options = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum UpdateType {
        REPLACE = 0,
        ADD = 1,
        REMOVE = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UpdateOpResponse : pb::IMessage<UpdateOpResponse> {
    private static readonly pb::MessageParser<UpdateOpResponse> _parser = new pb::MessageParser<UpdateOpResponse>(() => new UpdateOpResponse());
    public static pb::MessageParser<UpdateOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "uid" };
    private static readonly uint[] _fieldTags = new uint[] { 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[29]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_UpdateOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public UpdateOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UpdateOpResponse(UpdateOpResponse other) : this() {
      Uid = other.uid_ != null ? other.Uid.Clone() : null;
    }

    public UpdateOpResponse Clone() {
      return new UpdateOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (uid_ != null) Uid.Freeze();
    }

    public const int UidFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid uid_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid Uid {
      get { return uid_; }
      set {
        pb::Freezable.CheckMutable(this);
        uid_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UpdateOpResponse);
    }

    public bool Equals(UpdateOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Uid, other.Uid)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (uid_ != null) hash ^= Uid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (uid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Uid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      return size;
    }

    public void MergeFrom(UpdateOpResponse other) {
      if (other == null) {
        return;
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
        }
        Uid.MergeFrom(other.Uid);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (uid_ == null) {
              uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
            }
            input.ReadMessage(uid_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ValidateOpRequest : pb::IMessage<ValidateOpRequest> {
    private static readonly pb::MessageParser<ValidateOpRequest> _parser = new pb::MessageParser<ValidateOpRequest>(() => new ValidateOpRequest());
    public static pb::MessageParser<ValidateOpRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] {  };
    private static readonly uint[] _fieldTags = new uint[] {  };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[30]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_ValidateOpRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ValidateOpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ValidateOpRequest(ValidateOpRequest other) : this() {
    }

    public ValidateOpRequest Clone() {
      return new ValidateOpRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public override bool Equals(object other) {
      return Equals(other as ValidateOpRequest);
    }

    public bool Equals(ValidateOpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(ValidateOpRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ValidateOpResponse : pb::IMessage<ValidateOpResponse> {
    private static readonly pb::MessageParser<ValidateOpResponse> _parser = new pb::MessageParser<ValidateOpResponse>(() => new ValidateOpResponse());
    public static pb::MessageParser<ValidateOpResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] {  };
    private static readonly uint[] _fieldTags = new uint[] {  };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[31]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_ValidateOpResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ValidateOpResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ValidateOpResponse(ValidateOpResponse other) : this() {
    }

    public ValidateOpResponse Clone() {
      return new ValidateOpResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public override bool Equals(object other) {
      return Equals(other as ValidateOpResponse);
    }

    public bool Equals(ValidateOpResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(ValidateOpResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConfigurationChangeEvent : pb::IMessage<ConfigurationChangeEvent> {
    private static readonly pb::MessageParser<ConfigurationChangeEvent> _parser = new pb::MessageParser<ConfigurationChangeEvent>(() => new ConfigurationChangeEvent());
    public static pb::MessageParser<ConfigurationChangeEvent> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "configurationPropertyChange" };
    private static readonly uint[] _fieldTags = new uint[] { 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[32]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_ConfigurationChangeEvent__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ConfigurationChangeEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ConfigurationChangeEvent(ConfigurationChangeEvent other) : this() {
      configurationPropertyChange_ = other.configurationPropertyChange_;
    }

    public ConfigurationChangeEvent Clone() {
      return new ConfigurationChangeEvent(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int ConfigurationPropertyChangeFieldNumber = 1;
    private pb::ByteString configurationPropertyChange_ = pb::ByteString.Empty;
    public pb::ByteString ConfigurationPropertyChange {
      get { return configurationPropertyChange_; }
      set {
        pb::Freezable.CheckMutable(this);
        configurationPropertyChange_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ConfigurationChangeEvent);
    }

    public bool Equals(ConfigurationChangeEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfigurationPropertyChange != other.ConfigurationPropertyChange) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ConfigurationPropertyChange.Length != 0) hash ^= ConfigurationPropertyChange.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfigurationPropertyChange.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ConfigurationPropertyChange);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConfigurationPropertyChange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConfigurationPropertyChange);
      }
      return size;
    }

    public void MergeFrom(ConfigurationChangeEvent other) {
      if (other == null) {
        return;
      }
      if (other.ConfigurationPropertyChange.Length != 0) {
        ConfigurationPropertyChange = other.ConfigurationPropertyChange;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ConfigurationPropertyChange = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OperationRequest : pb::IMessage<OperationRequest> {
    private static readonly pb::MessageParser<OperationRequest> _parser = new pb::MessageParser<OperationRequest>(() => new OperationRequest());
    public static pb::MessageParser<OperationRequest> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "ValidateOpRequest", "authenticateOpRequest", "batchOpRequest", "configurationChangeEvent", "connectorEventSubscriptionOpRequest", "connectorFacadeKey", "connectorKey", "createOpRequest", "deleteOpRequest", "getOpRequest", "locale", "resolveUsernameOpRequest", "schemaOpRequest", "scriptOnConnectorOpRequest", "scriptOnResourceOpRequest", "searchOpRequest", "syncEventSubscriptionOpRequest", "syncOpRequest", "testOpRequest", "updateOpRequest" };
    private static readonly uint[] _fieldTags = new uint[] { 154, 34, 42, 162, 58, 18, 10, 50, 66, 74, 26, 82, 90, 98, 106, 114, 130, 122, 138, 146 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[33]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_OperationRequest__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public OperationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public OperationRequest(OperationRequest other) : this() {
      ConnectorKey = other.connectorKey_ != null ? other.ConnectorKey.Clone() : null;
      connectorFacadeKey_ = other.connectorFacadeKey_;
      Locale = other.locale_ != null ? other.Locale.Clone() : null;
      AuthenticateOpRequest = other.authenticateOpRequest_ != null ? other.AuthenticateOpRequest.Clone() : null;
      BatchOpRequest = other.batchOpRequest_ != null ? other.BatchOpRequest.Clone() : null;
      CreateOpRequest = other.createOpRequest_ != null ? other.CreateOpRequest.Clone() : null;
      ConnectorEventSubscriptionOpRequest = other.connectorEventSubscriptionOpRequest_ != null ? other.ConnectorEventSubscriptionOpRequest.Clone() : null;
      DeleteOpRequest = other.deleteOpRequest_ != null ? other.DeleteOpRequest.Clone() : null;
      GetOpRequest = other.getOpRequest_ != null ? other.GetOpRequest.Clone() : null;
      ResolveUsernameOpRequest = other.resolveUsernameOpRequest_ != null ? other.ResolveUsernameOpRequest.Clone() : null;
      SchemaOpRequest = other.schemaOpRequest_ != null ? other.SchemaOpRequest.Clone() : null;
      ScriptOnConnectorOpRequest = other.scriptOnConnectorOpRequest_ != null ? other.ScriptOnConnectorOpRequest.Clone() : null;
      ScriptOnResourceOpRequest = other.scriptOnResourceOpRequest_ != null ? other.ScriptOnResourceOpRequest.Clone() : null;
      SearchOpRequest = other.searchOpRequest_ != null ? other.SearchOpRequest.Clone() : null;
      SyncOpRequest = other.syncOpRequest_ != null ? other.SyncOpRequest.Clone() : null;
      SyncEventSubscriptionOpRequest = other.syncEventSubscriptionOpRequest_ != null ? other.SyncEventSubscriptionOpRequest.Clone() : null;
      TestOpRequest = other.testOpRequest_ != null ? other.TestOpRequest.Clone() : null;
      UpdateOpRequest = other.updateOpRequest_ != null ? other.UpdateOpRequest.Clone() : null;
      ValidateOpRequest = other.validateOpRequest_ != null ? other.ValidateOpRequest.Clone() : null;
      ConfigurationChangeEvent = other.configurationChangeEvent_ != null ? other.ConfigurationChangeEvent.Clone() : null;
    }

    public OperationRequest Clone() {
      return new OperationRequest(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (connectorKey_ != null) ConnectorKey.Freeze();
      if (locale_ != null) Locale.Freeze();
      if (authenticateOpRequest_ != null) AuthenticateOpRequest.Freeze();
      if (batchOpRequest_ != null) BatchOpRequest.Freeze();
      if (createOpRequest_ != null) CreateOpRequest.Freeze();
      if (connectorEventSubscriptionOpRequest_ != null) ConnectorEventSubscriptionOpRequest.Freeze();
      if (deleteOpRequest_ != null) DeleteOpRequest.Freeze();
      if (getOpRequest_ != null) GetOpRequest.Freeze();
      if (resolveUsernameOpRequest_ != null) ResolveUsernameOpRequest.Freeze();
      if (schemaOpRequest_ != null) SchemaOpRequest.Freeze();
      if (scriptOnConnectorOpRequest_ != null) ScriptOnConnectorOpRequest.Freeze();
      if (scriptOnResourceOpRequest_ != null) ScriptOnResourceOpRequest.Freeze();
      if (searchOpRequest_ != null) SearchOpRequest.Freeze();
      if (syncOpRequest_ != null) SyncOpRequest.Freeze();
      if (syncEventSubscriptionOpRequest_ != null) SyncEventSubscriptionOpRequest.Freeze();
      if (testOpRequest_ != null) TestOpRequest.Freeze();
      if (updateOpRequest_ != null) UpdateOpRequest.Freeze();
      if (validateOpRequest_ != null) ValidateOpRequest.Freeze();
      if (configurationChangeEvent_ != null) ConfigurationChangeEvent.Freeze();
    }

    public const int ConnectorKeyFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorKey connectorKey_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorKey ConnectorKey {
      get { return connectorKey_; }
      set {
        pb::Freezable.CheckMutable(this);
        connectorKey_ = value;
      }
    }

    public const int ConnectorFacadeKeyFieldNumber = 2;
    private pb::ByteString connectorFacadeKey_ = pb::ByteString.Empty;
    public pb::ByteString ConnectorFacadeKey {
      get { return connectorFacadeKey_; }
      set {
        pb::Freezable.CheckMutable(this);
        connectorFacadeKey_ = value ?? pb::ByteString.Empty;
      }
    }

    public const int LocaleFieldNumber = 3;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Locale locale_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Locale Locale {
      get { return locale_; }
      set {
        pb::Freezable.CheckMutable(this);
        locale_ = value;
      }
    }

    public const int AuthenticateOpRequestFieldNumber = 4;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.AuthenticateOpRequest authenticateOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.AuthenticateOpRequest AuthenticateOpRequest {
      get { return authenticateOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        authenticateOpRequest_ = value;
      }
    }

    public const int BatchOpRequestFieldNumber = 5;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.BatchOpRequest batchOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.BatchOpRequest BatchOpRequest {
      get { return batchOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        batchOpRequest_ = value;
      }
    }

    public const int CreateOpRequestFieldNumber = 6;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CreateOpRequest createOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CreateOpRequest CreateOpRequest {
      get { return createOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        createOpRequest_ = value;
      }
    }

    public const int ConnectorEventSubscriptionOpRequestFieldNumber = 7;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorEventSubscriptionOpRequest connectorEventSubscriptionOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorEventSubscriptionOpRequest ConnectorEventSubscriptionOpRequest {
      get { return connectorEventSubscriptionOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        connectorEventSubscriptionOpRequest_ = value;
      }
    }

    public const int DeleteOpRequestFieldNumber = 8;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.DeleteOpRequest deleteOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.DeleteOpRequest DeleteOpRequest {
      get { return deleteOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        deleteOpRequest_ = value;
      }
    }

    public const int GetOpRequestFieldNumber = 9;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.GetOpRequest getOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.GetOpRequest GetOpRequest {
      get { return getOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        getOpRequest_ = value;
      }
    }

    public const int ResolveUsernameOpRequestFieldNumber = 10;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ResolveUsernameOpRequest resolveUsernameOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ResolveUsernameOpRequest ResolveUsernameOpRequest {
      get { return resolveUsernameOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        resolveUsernameOpRequest_ = value;
      }
    }

    public const int SchemaOpRequestFieldNumber = 11;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SchemaOpRequest schemaOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SchemaOpRequest SchemaOpRequest {
      get { return schemaOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        schemaOpRequest_ = value;
      }
    }

    public const int ScriptOnConnectorOpRequestFieldNumber = 12;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnConnectorOpRequest scriptOnConnectorOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnConnectorOpRequest ScriptOnConnectorOpRequest {
      get { return scriptOnConnectorOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        scriptOnConnectorOpRequest_ = value;
      }
    }

    public const int ScriptOnResourceOpRequestFieldNumber = 13;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnResourceOpRequest scriptOnResourceOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnResourceOpRequest ScriptOnResourceOpRequest {
      get { return scriptOnResourceOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        scriptOnResourceOpRequest_ = value;
      }
    }

    public const int SearchOpRequestFieldNumber = 14;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchOpRequest searchOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchOpRequest SearchOpRequest {
      get { return searchOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        searchOpRequest_ = value;
      }
    }

    public const int SyncOpRequestFieldNumber = 15;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest syncOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest SyncOpRequest {
      get { return syncOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        syncOpRequest_ = value;
      }
    }

    public const int SyncEventSubscriptionOpRequestFieldNumber = 16;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncEventSubscriptionOpRequest syncEventSubscriptionOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncEventSubscriptionOpRequest SyncEventSubscriptionOpRequest {
      get { return syncEventSubscriptionOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        syncEventSubscriptionOpRequest_ = value;
      }
    }

    public const int TestOpRequestFieldNumber = 17;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.TestOpRequest testOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.TestOpRequest TestOpRequest {
      get { return testOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        testOpRequest_ = value;
      }
    }

    public const int UpdateOpRequestFieldNumber = 18;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpRequest updateOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpRequest UpdateOpRequest {
      get { return updateOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        updateOpRequest_ = value;
      }
    }

    public const int ValidateOpRequestFieldNumber = 19;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ValidateOpRequest validateOpRequest_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ValidateOpRequest ValidateOpRequest {
      get { return validateOpRequest_; }
      set {
        pb::Freezable.CheckMutable(this);
        validateOpRequest_ = value;
      }
    }

    public const int ConfigurationChangeEventFieldNumber = 20;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConfigurationChangeEvent configurationChangeEvent_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConfigurationChangeEvent ConfigurationChangeEvent {
      get { return configurationChangeEvent_; }
      set {
        pb::Freezable.CheckMutable(this);
        configurationChangeEvent_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as OperationRequest);
    }

    public bool Equals(OperationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ConnectorKey, other.ConnectorKey)) return false;
      if (ConnectorFacadeKey != other.ConnectorFacadeKey) return false;
      if (!object.Equals(Locale, other.Locale)) return false;
      if (!object.Equals(AuthenticateOpRequest, other.AuthenticateOpRequest)) return false;
      if (!object.Equals(BatchOpRequest, other.BatchOpRequest)) return false;
      if (!object.Equals(CreateOpRequest, other.CreateOpRequest)) return false;
      if (!object.Equals(ConnectorEventSubscriptionOpRequest, other.ConnectorEventSubscriptionOpRequest)) return false;
      if (!object.Equals(DeleteOpRequest, other.DeleteOpRequest)) return false;
      if (!object.Equals(GetOpRequest, other.GetOpRequest)) return false;
      if (!object.Equals(ResolveUsernameOpRequest, other.ResolveUsernameOpRequest)) return false;
      if (!object.Equals(SchemaOpRequest, other.SchemaOpRequest)) return false;
      if (!object.Equals(ScriptOnConnectorOpRequest, other.ScriptOnConnectorOpRequest)) return false;
      if (!object.Equals(ScriptOnResourceOpRequest, other.ScriptOnResourceOpRequest)) return false;
      if (!object.Equals(SearchOpRequest, other.SearchOpRequest)) return false;
      if (!object.Equals(SyncOpRequest, other.SyncOpRequest)) return false;
      if (!object.Equals(SyncEventSubscriptionOpRequest, other.SyncEventSubscriptionOpRequest)) return false;
      if (!object.Equals(TestOpRequest, other.TestOpRequest)) return false;
      if (!object.Equals(UpdateOpRequest, other.UpdateOpRequest)) return false;
      if (!object.Equals(ValidateOpRequest, other.ValidateOpRequest)) return false;
      if (!object.Equals(ConfigurationChangeEvent, other.ConfigurationChangeEvent)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (connectorKey_ != null) hash ^= ConnectorKey.GetHashCode();
      if (ConnectorFacadeKey.Length != 0) hash ^= ConnectorFacadeKey.GetHashCode();
      if (locale_ != null) hash ^= Locale.GetHashCode();
      if (authenticateOpRequest_ != null) hash ^= AuthenticateOpRequest.GetHashCode();
      if (batchOpRequest_ != null) hash ^= BatchOpRequest.GetHashCode();
      if (createOpRequest_ != null) hash ^= CreateOpRequest.GetHashCode();
      if (connectorEventSubscriptionOpRequest_ != null) hash ^= ConnectorEventSubscriptionOpRequest.GetHashCode();
      if (deleteOpRequest_ != null) hash ^= DeleteOpRequest.GetHashCode();
      if (getOpRequest_ != null) hash ^= GetOpRequest.GetHashCode();
      if (resolveUsernameOpRequest_ != null) hash ^= ResolveUsernameOpRequest.GetHashCode();
      if (schemaOpRequest_ != null) hash ^= SchemaOpRequest.GetHashCode();
      if (scriptOnConnectorOpRequest_ != null) hash ^= ScriptOnConnectorOpRequest.GetHashCode();
      if (scriptOnResourceOpRequest_ != null) hash ^= ScriptOnResourceOpRequest.GetHashCode();
      if (searchOpRequest_ != null) hash ^= SearchOpRequest.GetHashCode();
      if (syncOpRequest_ != null) hash ^= SyncOpRequest.GetHashCode();
      if (syncEventSubscriptionOpRequest_ != null) hash ^= SyncEventSubscriptionOpRequest.GetHashCode();
      if (testOpRequest_ != null) hash ^= TestOpRequest.GetHashCode();
      if (updateOpRequest_ != null) hash ^= UpdateOpRequest.GetHashCode();
      if (validateOpRequest_ != null) hash ^= ValidateOpRequest.GetHashCode();
      if (configurationChangeEvent_ != null) hash ^= ConfigurationChangeEvent.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (connectorKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConnectorKey);
      }
      if (ConnectorFacadeKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ConnectorFacadeKey);
      }
      if (locale_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Locale);
      }
      if (authenticateOpRequest_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AuthenticateOpRequest);
      }
      if (batchOpRequest_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BatchOpRequest);
      }
      if (createOpRequest_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateOpRequest);
      }
      if (connectorEventSubscriptionOpRequest_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ConnectorEventSubscriptionOpRequest);
      }
      if (deleteOpRequest_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DeleteOpRequest);
      }
      if (getOpRequest_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(GetOpRequest);
      }
      if (resolveUsernameOpRequest_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ResolveUsernameOpRequest);
      }
      if (schemaOpRequest_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SchemaOpRequest);
      }
      if (scriptOnConnectorOpRequest_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ScriptOnConnectorOpRequest);
      }
      if (scriptOnResourceOpRequest_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ScriptOnResourceOpRequest);
      }
      if (searchOpRequest_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(SearchOpRequest);
      }
      if (syncOpRequest_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(SyncOpRequest);
      }
      if (syncEventSubscriptionOpRequest_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(SyncEventSubscriptionOpRequest);
      }
      if (testOpRequest_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(TestOpRequest);
      }
      if (updateOpRequest_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(UpdateOpRequest);
      }
      if (validateOpRequest_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ValidateOpRequest);
      }
      if (configurationChangeEvent_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(ConfigurationChangeEvent);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (connectorKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectorKey);
      }
      if (ConnectorFacadeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConnectorFacadeKey);
      }
      if (locale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Locale);
      }
      if (authenticateOpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthenticateOpRequest);
      }
      if (batchOpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BatchOpRequest);
      }
      if (createOpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateOpRequest);
      }
      if (connectorEventSubscriptionOpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectorEventSubscriptionOpRequest);
      }
      if (deleteOpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteOpRequest);
      }
      if (getOpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetOpRequest);
      }
      if (resolveUsernameOpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResolveUsernameOpRequest);
      }
      if (schemaOpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemaOpRequest);
      }
      if (scriptOnConnectorOpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScriptOnConnectorOpRequest);
      }
      if (scriptOnResourceOpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScriptOnResourceOpRequest);
      }
      if (searchOpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchOpRequest);
      }
      if (syncOpRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncOpRequest);
      }
      if (syncEventSubscriptionOpRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SyncEventSubscriptionOpRequest);
      }
      if (testOpRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TestOpRequest);
      }
      if (updateOpRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpdateOpRequest);
      }
      if (validateOpRequest_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ValidateOpRequest);
      }
      if (configurationChangeEvent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConfigurationChangeEvent);
      }
      return size;
    }

    public void MergeFrom(OperationRequest other) {
      if (other == null) {
        return;
      }
      if (other.connectorKey_ != null) {
        if (connectorKey_ == null) {
          connectorKey_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorKey();
        }
        ConnectorKey.MergeFrom(other.ConnectorKey);
      }
      if (other.ConnectorFacadeKey.Length != 0) {
        ConnectorFacadeKey = other.ConnectorFacadeKey;
      }
      if (other.locale_ != null) {
        if (locale_ == null) {
          locale_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Locale();
        }
        Locale.MergeFrom(other.Locale);
      }
      if (other.authenticateOpRequest_ != null) {
        if (authenticateOpRequest_ == null) {
          authenticateOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.AuthenticateOpRequest();
        }
        AuthenticateOpRequest.MergeFrom(other.AuthenticateOpRequest);
      }
      if (other.batchOpRequest_ != null) {
        if (batchOpRequest_ == null) {
          batchOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.BatchOpRequest();
        }
        BatchOpRequest.MergeFrom(other.BatchOpRequest);
      }
      if (other.createOpRequest_ != null) {
        if (createOpRequest_ == null) {
          createOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CreateOpRequest();
        }
        CreateOpRequest.MergeFrom(other.CreateOpRequest);
      }
      if (other.connectorEventSubscriptionOpRequest_ != null) {
        if (connectorEventSubscriptionOpRequest_ == null) {
          connectorEventSubscriptionOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorEventSubscriptionOpRequest();
        }
        ConnectorEventSubscriptionOpRequest.MergeFrom(other.ConnectorEventSubscriptionOpRequest);
      }
      if (other.deleteOpRequest_ != null) {
        if (deleteOpRequest_ == null) {
          deleteOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.DeleteOpRequest();
        }
        DeleteOpRequest.MergeFrom(other.DeleteOpRequest);
      }
      if (other.getOpRequest_ != null) {
        if (getOpRequest_ == null) {
          getOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.GetOpRequest();
        }
        GetOpRequest.MergeFrom(other.GetOpRequest);
      }
      if (other.resolveUsernameOpRequest_ != null) {
        if (resolveUsernameOpRequest_ == null) {
          resolveUsernameOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ResolveUsernameOpRequest();
        }
        ResolveUsernameOpRequest.MergeFrom(other.ResolveUsernameOpRequest);
      }
      if (other.schemaOpRequest_ != null) {
        if (schemaOpRequest_ == null) {
          schemaOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SchemaOpRequest();
        }
        SchemaOpRequest.MergeFrom(other.SchemaOpRequest);
      }
      if (other.scriptOnConnectorOpRequest_ != null) {
        if (scriptOnConnectorOpRequest_ == null) {
          scriptOnConnectorOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnConnectorOpRequest();
        }
        ScriptOnConnectorOpRequest.MergeFrom(other.ScriptOnConnectorOpRequest);
      }
      if (other.scriptOnResourceOpRequest_ != null) {
        if (scriptOnResourceOpRequest_ == null) {
          scriptOnResourceOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnResourceOpRequest();
        }
        ScriptOnResourceOpRequest.MergeFrom(other.ScriptOnResourceOpRequest);
      }
      if (other.searchOpRequest_ != null) {
        if (searchOpRequest_ == null) {
          searchOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchOpRequest();
        }
        SearchOpRequest.MergeFrom(other.SearchOpRequest);
      }
      if (other.syncOpRequest_ != null) {
        if (syncOpRequest_ == null) {
          syncOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest();
        }
        SyncOpRequest.MergeFrom(other.SyncOpRequest);
      }
      if (other.syncEventSubscriptionOpRequest_ != null) {
        if (syncEventSubscriptionOpRequest_ == null) {
          syncEventSubscriptionOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncEventSubscriptionOpRequest();
        }
        SyncEventSubscriptionOpRequest.MergeFrom(other.SyncEventSubscriptionOpRequest);
      }
      if (other.testOpRequest_ != null) {
        if (testOpRequest_ == null) {
          testOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.TestOpRequest();
        }
        TestOpRequest.MergeFrom(other.TestOpRequest);
      }
      if (other.updateOpRequest_ != null) {
        if (updateOpRequest_ == null) {
          updateOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpRequest();
        }
        UpdateOpRequest.MergeFrom(other.UpdateOpRequest);
      }
      if (other.validateOpRequest_ != null) {
        if (validateOpRequest_ == null) {
          validateOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ValidateOpRequest();
        }
        ValidateOpRequest.MergeFrom(other.ValidateOpRequest);
      }
      if (other.configurationChangeEvent_ != null) {
        if (configurationChangeEvent_ == null) {
          configurationChangeEvent_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConfigurationChangeEvent();
        }
        ConfigurationChangeEvent.MergeFrom(other.ConfigurationChangeEvent);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (connectorKey_ == null) {
              connectorKey_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorKey();
            }
            input.ReadMessage(connectorKey_);
            break;
          }
          case 18: {
            ConnectorFacadeKey = input.ReadBytes();
            break;
          }
          case 26: {
            if (locale_ == null) {
              locale_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Locale();
            }
            input.ReadMessage(locale_);
            break;
          }
          case 34: {
            if (authenticateOpRequest_ == null) {
              authenticateOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.AuthenticateOpRequest();
            }
            input.ReadMessage(authenticateOpRequest_);
            break;
          }
          case 42: {
            if (batchOpRequest_ == null) {
              batchOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.BatchOpRequest();
            }
            input.ReadMessage(batchOpRequest_);
            break;
          }
          case 50: {
            if (createOpRequest_ == null) {
              createOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CreateOpRequest();
            }
            input.ReadMessage(createOpRequest_);
            break;
          }
          case 58: {
            if (connectorEventSubscriptionOpRequest_ == null) {
              connectorEventSubscriptionOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorEventSubscriptionOpRequest();
            }
            input.ReadMessage(connectorEventSubscriptionOpRequest_);
            break;
          }
          case 66: {
            if (deleteOpRequest_ == null) {
              deleteOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.DeleteOpRequest();
            }
            input.ReadMessage(deleteOpRequest_);
            break;
          }
          case 74: {
            if (getOpRequest_ == null) {
              getOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.GetOpRequest();
            }
            input.ReadMessage(getOpRequest_);
            break;
          }
          case 82: {
            if (resolveUsernameOpRequest_ == null) {
              resolveUsernameOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ResolveUsernameOpRequest();
            }
            input.ReadMessage(resolveUsernameOpRequest_);
            break;
          }
          case 90: {
            if (schemaOpRequest_ == null) {
              schemaOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SchemaOpRequest();
            }
            input.ReadMessage(schemaOpRequest_);
            break;
          }
          case 98: {
            if (scriptOnConnectorOpRequest_ == null) {
              scriptOnConnectorOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnConnectorOpRequest();
            }
            input.ReadMessage(scriptOnConnectorOpRequest_);
            break;
          }
          case 106: {
            if (scriptOnResourceOpRequest_ == null) {
              scriptOnResourceOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnResourceOpRequest();
            }
            input.ReadMessage(scriptOnResourceOpRequest_);
            break;
          }
          case 114: {
            if (searchOpRequest_ == null) {
              searchOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchOpRequest();
            }
            input.ReadMessage(searchOpRequest_);
            break;
          }
          case 122: {
            if (syncOpRequest_ == null) {
              syncOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpRequest();
            }
            input.ReadMessage(syncOpRequest_);
            break;
          }
          case 130: {
            if (syncEventSubscriptionOpRequest_ == null) {
              syncEventSubscriptionOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncEventSubscriptionOpRequest();
            }
            input.ReadMessage(syncEventSubscriptionOpRequest_);
            break;
          }
          case 138: {
            if (testOpRequest_ == null) {
              testOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.TestOpRequest();
            }
            input.ReadMessage(testOpRequest_);
            break;
          }
          case 146: {
            if (updateOpRequest_ == null) {
              updateOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpRequest();
            }
            input.ReadMessage(updateOpRequest_);
            break;
          }
          case 154: {
            if (validateOpRequest_ == null) {
              validateOpRequest_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ValidateOpRequest();
            }
            input.ReadMessage(validateOpRequest_);
            break;
          }
          case 162: {
            if (configurationChangeEvent_ == null) {
              configurationChangeEvent_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConfigurationChangeEvent();
            }
            input.ReadMessage(configurationChangeEvent_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OperationResponse : pb::IMessage<OperationResponse> {
    private static readonly pb::MessageParser<OperationResponse> _parser = new pb::MessageParser<OperationResponse>(() => new OperationResponse());
    public static pb::MessageParser<OperationResponse> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "GetOpResponse", "authenticateOpResponse", "batchOpResponse", "connectorEventSubscriptionOpResponse", "createOpResponse", "deleteOpResponse", "resolveUsernameOpResponse", "schemaOpResponse", "scriptOnConnectorOpResponse", "scriptOnResourceOpResponse", "searchOpResponse", "syncEventSubscriptionOpResponse", "syncOpResponse", "testOpResponse", "updateOpResponse", "validateOpResponse" };
    private static readonly uint[] _fieldTags = new uint[] { 50, 10, 18, 34, 26, 42, 58, 66, 74, 82, 90, 106, 98, 114, 122, 130 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.Descriptor.MessageTypes[34]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.OperationMessages.internal__static_OperationResponse__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public OperationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public OperationResponse(OperationResponse other) : this() {
      AuthenticateOpResponse = other.authenticateOpResponse_ != null ? other.AuthenticateOpResponse.Clone() : null;
      BatchOpResponse = other.batchOpResponse_ != null ? other.BatchOpResponse.Clone() : null;
      CreateOpResponse = other.createOpResponse_ != null ? other.CreateOpResponse.Clone() : null;
      ConnectorEventSubscriptionOpResponse = other.connectorEventSubscriptionOpResponse_ != null ? other.ConnectorEventSubscriptionOpResponse.Clone() : null;
      DeleteOpResponse = other.deleteOpResponse_ != null ? other.DeleteOpResponse.Clone() : null;
      GetOpResponse = other.getOpResponse_ != null ? other.GetOpResponse.Clone() : null;
      ResolveUsernameOpResponse = other.resolveUsernameOpResponse_ != null ? other.ResolveUsernameOpResponse.Clone() : null;
      SchemaOpResponse = other.schemaOpResponse_ != null ? other.SchemaOpResponse.Clone() : null;
      ScriptOnConnectorOpResponse = other.scriptOnConnectorOpResponse_ != null ? other.ScriptOnConnectorOpResponse.Clone() : null;
      ScriptOnResourceOpResponse = other.scriptOnResourceOpResponse_ != null ? other.ScriptOnResourceOpResponse.Clone() : null;
      SearchOpResponse = other.searchOpResponse_ != null ? other.SearchOpResponse.Clone() : null;
      SyncOpResponse = other.syncOpResponse_ != null ? other.SyncOpResponse.Clone() : null;
      SyncEventSubscriptionOpResponse = other.syncEventSubscriptionOpResponse_ != null ? other.SyncEventSubscriptionOpResponse.Clone() : null;
      TestOpResponse = other.testOpResponse_ != null ? other.TestOpResponse.Clone() : null;
      UpdateOpResponse = other.updateOpResponse_ != null ? other.UpdateOpResponse.Clone() : null;
      ValidateOpResponse = other.validateOpResponse_ != null ? other.ValidateOpResponse.Clone() : null;
    }

    public OperationResponse Clone() {
      return new OperationResponse(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (authenticateOpResponse_ != null) AuthenticateOpResponse.Freeze();
      if (batchOpResponse_ != null) BatchOpResponse.Freeze();
      if (createOpResponse_ != null) CreateOpResponse.Freeze();
      if (connectorEventSubscriptionOpResponse_ != null) ConnectorEventSubscriptionOpResponse.Freeze();
      if (deleteOpResponse_ != null) DeleteOpResponse.Freeze();
      if (getOpResponse_ != null) GetOpResponse.Freeze();
      if (resolveUsernameOpResponse_ != null) ResolveUsernameOpResponse.Freeze();
      if (schemaOpResponse_ != null) SchemaOpResponse.Freeze();
      if (scriptOnConnectorOpResponse_ != null) ScriptOnConnectorOpResponse.Freeze();
      if (scriptOnResourceOpResponse_ != null) ScriptOnResourceOpResponse.Freeze();
      if (searchOpResponse_ != null) SearchOpResponse.Freeze();
      if (syncOpResponse_ != null) SyncOpResponse.Freeze();
      if (syncEventSubscriptionOpResponse_ != null) SyncEventSubscriptionOpResponse.Freeze();
      if (testOpResponse_ != null) TestOpResponse.Freeze();
      if (updateOpResponse_ != null) UpdateOpResponse.Freeze();
      if (validateOpResponse_ != null) ValidateOpResponse.Freeze();
    }

    public const int AuthenticateOpResponseFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.AuthenticateOpResponse authenticateOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.AuthenticateOpResponse AuthenticateOpResponse {
      get { return authenticateOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        authenticateOpResponse_ = value;
      }
    }

    public const int BatchOpResponseFieldNumber = 2;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.BatchOpResponse batchOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.BatchOpResponse BatchOpResponse {
      get { return batchOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        batchOpResponse_ = value;
      }
    }

    public const int CreateOpResponseFieldNumber = 3;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CreateOpResponse createOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CreateOpResponse CreateOpResponse {
      get { return createOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        createOpResponse_ = value;
      }
    }

    public const int ConnectorEventSubscriptionOpResponseFieldNumber = 4;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorEventSubscriptionOpResponse connectorEventSubscriptionOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorEventSubscriptionOpResponse ConnectorEventSubscriptionOpResponse {
      get { return connectorEventSubscriptionOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        connectorEventSubscriptionOpResponse_ = value;
      }
    }

    public const int DeleteOpResponseFieldNumber = 5;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.DeleteOpResponse deleteOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.DeleteOpResponse DeleteOpResponse {
      get { return deleteOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        deleteOpResponse_ = value;
      }
    }

    public const int GetOpResponseFieldNumber = 6;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.GetOpResponse getOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.GetOpResponse GetOpResponse {
      get { return getOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        getOpResponse_ = value;
      }
    }

    public const int ResolveUsernameOpResponseFieldNumber = 7;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ResolveUsernameOpResponse resolveUsernameOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ResolveUsernameOpResponse ResolveUsernameOpResponse {
      get { return resolveUsernameOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        resolveUsernameOpResponse_ = value;
      }
    }

    public const int SchemaOpResponseFieldNumber = 8;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SchemaOpResponse schemaOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SchemaOpResponse SchemaOpResponse {
      get { return schemaOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        schemaOpResponse_ = value;
      }
    }

    public const int ScriptOnConnectorOpResponseFieldNumber = 9;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnConnectorOpResponse scriptOnConnectorOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnConnectorOpResponse ScriptOnConnectorOpResponse {
      get { return scriptOnConnectorOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        scriptOnConnectorOpResponse_ = value;
      }
    }

    public const int ScriptOnResourceOpResponseFieldNumber = 10;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnResourceOpResponse scriptOnResourceOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnResourceOpResponse ScriptOnResourceOpResponse {
      get { return scriptOnResourceOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        scriptOnResourceOpResponse_ = value;
      }
    }

    public const int SearchOpResponseFieldNumber = 11;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchOpResponse searchOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchOpResponse SearchOpResponse {
      get { return searchOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        searchOpResponse_ = value;
      }
    }

    public const int SyncOpResponseFieldNumber = 12;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse syncOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse SyncOpResponse {
      get { return syncOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        syncOpResponse_ = value;
      }
    }

    public const int SyncEventSubscriptionOpResponseFieldNumber = 13;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncEventSubscriptionOpResponse syncEventSubscriptionOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncEventSubscriptionOpResponse SyncEventSubscriptionOpResponse {
      get { return syncEventSubscriptionOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        syncEventSubscriptionOpResponse_ = value;
      }
    }

    public const int TestOpResponseFieldNumber = 14;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.TestOpResponse testOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.TestOpResponse TestOpResponse {
      get { return testOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        testOpResponse_ = value;
      }
    }

    public const int UpdateOpResponseFieldNumber = 15;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpResponse updateOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpResponse UpdateOpResponse {
      get { return updateOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        updateOpResponse_ = value;
      }
    }

    public const int ValidateOpResponseFieldNumber = 16;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ValidateOpResponse validateOpResponse_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ValidateOpResponse ValidateOpResponse {
      get { return validateOpResponse_; }
      set {
        pb::Freezable.CheckMutable(this);
        validateOpResponse_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as OperationResponse);
    }

    public bool Equals(OperationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AuthenticateOpResponse, other.AuthenticateOpResponse)) return false;
      if (!object.Equals(BatchOpResponse, other.BatchOpResponse)) return false;
      if (!object.Equals(CreateOpResponse, other.CreateOpResponse)) return false;
      if (!object.Equals(ConnectorEventSubscriptionOpResponse, other.ConnectorEventSubscriptionOpResponse)) return false;
      if (!object.Equals(DeleteOpResponse, other.DeleteOpResponse)) return false;
      if (!object.Equals(GetOpResponse, other.GetOpResponse)) return false;
      if (!object.Equals(ResolveUsernameOpResponse, other.ResolveUsernameOpResponse)) return false;
      if (!object.Equals(SchemaOpResponse, other.SchemaOpResponse)) return false;
      if (!object.Equals(ScriptOnConnectorOpResponse, other.ScriptOnConnectorOpResponse)) return false;
      if (!object.Equals(ScriptOnResourceOpResponse, other.ScriptOnResourceOpResponse)) return false;
      if (!object.Equals(SearchOpResponse, other.SearchOpResponse)) return false;
      if (!object.Equals(SyncOpResponse, other.SyncOpResponse)) return false;
      if (!object.Equals(SyncEventSubscriptionOpResponse, other.SyncEventSubscriptionOpResponse)) return false;
      if (!object.Equals(TestOpResponse, other.TestOpResponse)) return false;
      if (!object.Equals(UpdateOpResponse, other.UpdateOpResponse)) return false;
      if (!object.Equals(ValidateOpResponse, other.ValidateOpResponse)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (authenticateOpResponse_ != null) hash ^= AuthenticateOpResponse.GetHashCode();
      if (batchOpResponse_ != null) hash ^= BatchOpResponse.GetHashCode();
      if (createOpResponse_ != null) hash ^= CreateOpResponse.GetHashCode();
      if (connectorEventSubscriptionOpResponse_ != null) hash ^= ConnectorEventSubscriptionOpResponse.GetHashCode();
      if (deleteOpResponse_ != null) hash ^= DeleteOpResponse.GetHashCode();
      if (getOpResponse_ != null) hash ^= GetOpResponse.GetHashCode();
      if (resolveUsernameOpResponse_ != null) hash ^= ResolveUsernameOpResponse.GetHashCode();
      if (schemaOpResponse_ != null) hash ^= SchemaOpResponse.GetHashCode();
      if (scriptOnConnectorOpResponse_ != null) hash ^= ScriptOnConnectorOpResponse.GetHashCode();
      if (scriptOnResourceOpResponse_ != null) hash ^= ScriptOnResourceOpResponse.GetHashCode();
      if (searchOpResponse_ != null) hash ^= SearchOpResponse.GetHashCode();
      if (syncOpResponse_ != null) hash ^= SyncOpResponse.GetHashCode();
      if (syncEventSubscriptionOpResponse_ != null) hash ^= SyncEventSubscriptionOpResponse.GetHashCode();
      if (testOpResponse_ != null) hash ^= TestOpResponse.GetHashCode();
      if (updateOpResponse_ != null) hash ^= UpdateOpResponse.GetHashCode();
      if (validateOpResponse_ != null) hash ^= ValidateOpResponse.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (authenticateOpResponse_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AuthenticateOpResponse);
      }
      if (batchOpResponse_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BatchOpResponse);
      }
      if (createOpResponse_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreateOpResponse);
      }
      if (connectorEventSubscriptionOpResponse_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ConnectorEventSubscriptionOpResponse);
      }
      if (deleteOpResponse_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DeleteOpResponse);
      }
      if (getOpResponse_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(GetOpResponse);
      }
      if (resolveUsernameOpResponse_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ResolveUsernameOpResponse);
      }
      if (schemaOpResponse_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SchemaOpResponse);
      }
      if (scriptOnConnectorOpResponse_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ScriptOnConnectorOpResponse);
      }
      if (scriptOnResourceOpResponse_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ScriptOnResourceOpResponse);
      }
      if (searchOpResponse_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SearchOpResponse);
      }
      if (syncOpResponse_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SyncOpResponse);
      }
      if (syncEventSubscriptionOpResponse_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(SyncEventSubscriptionOpResponse);
      }
      if (testOpResponse_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(TestOpResponse);
      }
      if (updateOpResponse_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(UpdateOpResponse);
      }
      if (validateOpResponse_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ValidateOpResponse);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (authenticateOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuthenticateOpResponse);
      }
      if (batchOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BatchOpResponse);
      }
      if (createOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateOpResponse);
      }
      if (connectorEventSubscriptionOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectorEventSubscriptionOpResponse);
      }
      if (deleteOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteOpResponse);
      }
      if (getOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetOpResponse);
      }
      if (resolveUsernameOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResolveUsernameOpResponse);
      }
      if (schemaOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemaOpResponse);
      }
      if (scriptOnConnectorOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScriptOnConnectorOpResponse);
      }
      if (scriptOnResourceOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScriptOnResourceOpResponse);
      }
      if (searchOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SearchOpResponse);
      }
      if (syncOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncOpResponse);
      }
      if (syncEventSubscriptionOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncEventSubscriptionOpResponse);
      }
      if (testOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestOpResponse);
      }
      if (updateOpResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateOpResponse);
      }
      if (validateOpResponse_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ValidateOpResponse);
      }
      return size;
    }

    public void MergeFrom(OperationResponse other) {
      if (other == null) {
        return;
      }
      if (other.authenticateOpResponse_ != null) {
        if (authenticateOpResponse_ == null) {
          authenticateOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.AuthenticateOpResponse();
        }
        AuthenticateOpResponse.MergeFrom(other.AuthenticateOpResponse);
      }
      if (other.batchOpResponse_ != null) {
        if (batchOpResponse_ == null) {
          batchOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.BatchOpResponse();
        }
        BatchOpResponse.MergeFrom(other.BatchOpResponse);
      }
      if (other.createOpResponse_ != null) {
        if (createOpResponse_ == null) {
          createOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CreateOpResponse();
        }
        CreateOpResponse.MergeFrom(other.CreateOpResponse);
      }
      if (other.connectorEventSubscriptionOpResponse_ != null) {
        if (connectorEventSubscriptionOpResponse_ == null) {
          connectorEventSubscriptionOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorEventSubscriptionOpResponse();
        }
        ConnectorEventSubscriptionOpResponse.MergeFrom(other.ConnectorEventSubscriptionOpResponse);
      }
      if (other.deleteOpResponse_ != null) {
        if (deleteOpResponse_ == null) {
          deleteOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.DeleteOpResponse();
        }
        DeleteOpResponse.MergeFrom(other.DeleteOpResponse);
      }
      if (other.getOpResponse_ != null) {
        if (getOpResponse_ == null) {
          getOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.GetOpResponse();
        }
        GetOpResponse.MergeFrom(other.GetOpResponse);
      }
      if (other.resolveUsernameOpResponse_ != null) {
        if (resolveUsernameOpResponse_ == null) {
          resolveUsernameOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ResolveUsernameOpResponse();
        }
        ResolveUsernameOpResponse.MergeFrom(other.ResolveUsernameOpResponse);
      }
      if (other.schemaOpResponse_ != null) {
        if (schemaOpResponse_ == null) {
          schemaOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SchemaOpResponse();
        }
        SchemaOpResponse.MergeFrom(other.SchemaOpResponse);
      }
      if (other.scriptOnConnectorOpResponse_ != null) {
        if (scriptOnConnectorOpResponse_ == null) {
          scriptOnConnectorOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnConnectorOpResponse();
        }
        ScriptOnConnectorOpResponse.MergeFrom(other.ScriptOnConnectorOpResponse);
      }
      if (other.scriptOnResourceOpResponse_ != null) {
        if (scriptOnResourceOpResponse_ == null) {
          scriptOnResourceOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnResourceOpResponse();
        }
        ScriptOnResourceOpResponse.MergeFrom(other.ScriptOnResourceOpResponse);
      }
      if (other.searchOpResponse_ != null) {
        if (searchOpResponse_ == null) {
          searchOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchOpResponse();
        }
        SearchOpResponse.MergeFrom(other.SearchOpResponse);
      }
      if (other.syncOpResponse_ != null) {
        if (syncOpResponse_ == null) {
          syncOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse();
        }
        SyncOpResponse.MergeFrom(other.SyncOpResponse);
      }
      if (other.syncEventSubscriptionOpResponse_ != null) {
        if (syncEventSubscriptionOpResponse_ == null) {
          syncEventSubscriptionOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncEventSubscriptionOpResponse();
        }
        SyncEventSubscriptionOpResponse.MergeFrom(other.SyncEventSubscriptionOpResponse);
      }
      if (other.testOpResponse_ != null) {
        if (testOpResponse_ == null) {
          testOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.TestOpResponse();
        }
        TestOpResponse.MergeFrom(other.TestOpResponse);
      }
      if (other.updateOpResponse_ != null) {
        if (updateOpResponse_ == null) {
          updateOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpResponse();
        }
        UpdateOpResponse.MergeFrom(other.UpdateOpResponse);
      }
      if (other.validateOpResponse_ != null) {
        if (validateOpResponse_ == null) {
          validateOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ValidateOpResponse();
        }
        ValidateOpResponse.MergeFrom(other.ValidateOpResponse);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (authenticateOpResponse_ == null) {
              authenticateOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.AuthenticateOpResponse();
            }
            input.ReadMessage(authenticateOpResponse_);
            break;
          }
          case 18: {
            if (batchOpResponse_ == null) {
              batchOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.BatchOpResponse();
            }
            input.ReadMessage(batchOpResponse_);
            break;
          }
          case 26: {
            if (createOpResponse_ == null) {
              createOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CreateOpResponse();
            }
            input.ReadMessage(createOpResponse_);
            break;
          }
          case 34: {
            if (connectorEventSubscriptionOpResponse_ == null) {
              connectorEventSubscriptionOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorEventSubscriptionOpResponse();
            }
            input.ReadMessage(connectorEventSubscriptionOpResponse_);
            break;
          }
          case 42: {
            if (deleteOpResponse_ == null) {
              deleteOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.DeleteOpResponse();
            }
            input.ReadMessage(deleteOpResponse_);
            break;
          }
          case 50: {
            if (getOpResponse_ == null) {
              getOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.GetOpResponse();
            }
            input.ReadMessage(getOpResponse_);
            break;
          }
          case 58: {
            if (resolveUsernameOpResponse_ == null) {
              resolveUsernameOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ResolveUsernameOpResponse();
            }
            input.ReadMessage(resolveUsernameOpResponse_);
            break;
          }
          case 66: {
            if (schemaOpResponse_ == null) {
              schemaOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SchemaOpResponse();
            }
            input.ReadMessage(schemaOpResponse_);
            break;
          }
          case 74: {
            if (scriptOnConnectorOpResponse_ == null) {
              scriptOnConnectorOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnConnectorOpResponse();
            }
            input.ReadMessage(scriptOnConnectorOpResponse_);
            break;
          }
          case 82: {
            if (scriptOnResourceOpResponse_ == null) {
              scriptOnResourceOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptOnResourceOpResponse();
            }
            input.ReadMessage(scriptOnResourceOpResponse_);
            break;
          }
          case 90: {
            if (searchOpResponse_ == null) {
              searchOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchOpResponse();
            }
            input.ReadMessage(searchOpResponse_);
            break;
          }
          case 98: {
            if (syncOpResponse_ == null) {
              syncOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncOpResponse();
            }
            input.ReadMessage(syncOpResponse_);
            break;
          }
          case 106: {
            if (syncEventSubscriptionOpResponse_ == null) {
              syncEventSubscriptionOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncEventSubscriptionOpResponse();
            }
            input.ReadMessage(syncEventSubscriptionOpResponse_);
            break;
          }
          case 114: {
            if (testOpResponse_ == null) {
              testOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.TestOpResponse();
            }
            input.ReadMessage(testOpResponse_);
            break;
          }
          case 122: {
            if (updateOpResponse_ == null) {
              updateOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.UpdateOpResponse();
            }
            input.ReadMessage(updateOpResponse_);
            break;
          }
          case 130: {
            if (validateOpResponse_ == null) {
              validateOpResponse_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ValidateOpResponse();
            }
            input.ReadMessage(validateOpResponse_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
