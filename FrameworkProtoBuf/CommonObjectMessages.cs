// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonObjectMessages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.ForgeRock.OpenICF.Common.ProtoBuf {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class CommonObjectMessages {

    #region Static variables
    internal static pbr::FieldAccessorTable internal__static_Uid__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_BigDecimal__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ConnectorKey__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_Locale__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_Script__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ScriptContext__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SearchResult__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SortKey__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SyncToken__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_SyncDelta__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_ConnectorObject__FieldAccessorTable;
    internal static pbr::FieldAccessorTable internal__static_QualifiedUid__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonObjectMessages() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpDb21tb25PYmplY3RNZXNzYWdlcy5wcm90byImCgNVaWQSDQoFdmFsdWUY", 
            "ASABKAkSEAoIcmV2aXNpb24YAiABKAkiLQoKQmlnRGVjaW1hbBIQCgh1bnNj", 
            "YWxlZBgBIAEoCRINCgVzY2FsZRgCIAEoBSJQCgxDb25uZWN0b3JLZXkSEgoK", 
            "YnVuZGxlTmFtZRgBIAEoCRIVCg1idW5kbGVWZXJzaW9uGAIgASgJEhUKDWNv", 
            "bm5lY3Rvck5hbWUYAyABKAkiPAoGTG9jYWxlEhAKCGxhbmd1YWdlGAEgASgJ", 
            "Eg8KB2NvdW50cnkYAiABKAkSDwoHdmFyaWFudBgDIAEoCSI0CgZTY3JpcHQS", 
            "FgoOc2NyaXB0TGFuZ3VhZ2UYASABKAkSEgoKc2NyaXB0VGV4dBgCIAEoCSJB", 
            "Cg1TY3JpcHRDb250ZXh0EhcKBnNjcmlwdBgBIAEoCzIHLlNjcmlwdBIXCg9z", 
            "Y3JpcHRBcmd1bWVudHMYAiABKAwiSQoMU2VhcmNoUmVzdWx0EhoKEnBhZ2Vk", 
            "UmVzdWx0c0Nvb2tpZRgBIAEoCRIdChVyZW1haW5pbmdQYWdlZFJlc3VsdHMY", 
            "AiABKAUiLQoHU29ydEtleRINCgVmaWVsZBgBIAEoCRITCgtpc0FzY2VuZGlu", 
            "ZxgCIAEoCCIaCglTeW5jVG9rZW4SDQoFdmFsdWUYASABKAwi+gEKCVN5bmNE", 
            "ZWx0YRIZCgV0b2tlbhgBIAEoCzIKLlN5bmNUb2tlbhIrCglkZWx0YVR5cGUY", 
            "AiABKA4yGC5TeW5jRGVsdGEuU3luY0RlbHRhVHlwZRIZCgtwcmV2aW91c1Vp", 
            "ZBgDIAEoCzIELlVpZBITCgtvYmplY3RDbGFzcxgEIAEoCRIRCgN1aWQYBSAB", 
            "KAsyBC5VaWQSFwoPY29ubmVjdG9yT2JqZWN0GAYgASgMIkkKDVN5bmNEZWx0", 
            "YVR5cGUSFAoQQ1JFQVRFX09SX1VQREFURRAAEgoKBkRFTEVURRABEgoKBkNS", 
            "RUFURRACEgoKBlVQREFURRADIjkKD0Nvbm5lY3Rvck9iamVjdBITCgtvYmpl", 
            "Y3RDbGFzcxgBIAEoCRIRCglhdHRyaXV0ZXMYAiABKAwiNgoMUXVhbGlmaWVk", 
            "VWlkEhMKC29iamVjdENsYXNzGAEgASgJEhEKA3VpZBgCIAEoCzIELlVpZEIo", 
            "qgIlT3JnLkZvcmdlUm9jay5PcGVuSUNGLkNvbW1vbi5Qcm90b0J1ZmIGcHJv", 
          "dG8z"));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] {
          });
      internal__static_Uid__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid), descriptor.MessageTypes[0],
              new string[] { "Value", "Revision", }, new string[] { });
      internal__static_BigDecimal__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.BigDecimal), descriptor.MessageTypes[1],
              new string[] { "Unscaled", "Scale", }, new string[] { });
      internal__static_ConnectorKey__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorKey), descriptor.MessageTypes[2],
              new string[] { "BundleName", "BundleVersion", "ConnectorName", }, new string[] { });
      internal__static_Locale__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Locale), descriptor.MessageTypes[3],
              new string[] { "Language", "Country", "Variant", }, new string[] { });
      internal__static_Script__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Script), descriptor.MessageTypes[4],
              new string[] { "ScriptLanguage", "ScriptText", }, new string[] { });
      internal__static_ScriptContext__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ScriptContext), descriptor.MessageTypes[5],
              new string[] { "Script", "ScriptArguments", }, new string[] { });
      internal__static_SearchResult__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SearchResult), descriptor.MessageTypes[6],
              new string[] { "PagedResultsCookie", "RemainingPagedResults", }, new string[] { });
      internal__static_SortKey__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SortKey), descriptor.MessageTypes[7],
              new string[] { "Field", "IsAscending", }, new string[] { });
      internal__static_SyncToken__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken), descriptor.MessageTypes[8],
              new string[] { "Value", }, new string[] { });
      internal__static_SyncDelta__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta), descriptor.MessageTypes[9],
              new string[] { "Token", "DeltaType", "PreviousUid", "ObjectClass", "Uid", "ConnectorObject", }, new string[] { });
      internal__static_ConnectorObject__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.ConnectorObject), descriptor.MessageTypes[10],
              new string[] { "ObjectClass", "Attriutes", }, new string[] { });
      internal__static_QualifiedUid__FieldAccessorTable = 
          new pbr::FieldAccessorTable(typeof(global::Org.ForgeRock.OpenICF.Common.ProtoBuf.QualifiedUid), descriptor.MessageTypes[11],
              new string[] { "ObjectClass", "Uid", }, new string[] { });
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Uid : pb::IMessage<Uid> {
    private static readonly pb::MessageParser<Uid> _parser = new pb::MessageParser<Uid>(() => new Uid());
    public static pb::MessageParser<Uid> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "revision", "value" };
    private static readonly uint[] _fieldTags = new uint[] { 18, 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.Descriptor.MessageTypes[0]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.internal__static_Uid__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public Uid() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Uid(Uid other) : this() {
      value_ = other.value_;
      revision_ = other.revision_;
    }

    public Uid Clone() {
      return new Uid(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int ValueFieldNumber = 1;
    private string value_ = "";
    public string Value {
      get { return value_; }
      set {
        pb::Freezable.CheckMutable(this);
        value_ = value ?? "";
      }
    }

    public const int RevisionFieldNumber = 2;
    private string revision_ = "";
    public string Revision {
      get { return revision_; }
      set {
        pb::Freezable.CheckMutable(this);
        revision_ = value ?? "";
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Uid);
    }

    public bool Equals(Uid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (Revision != other.Revision) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Revision.Length != 0) hash ^= Revision.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (Revision.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Revision);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Revision.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Revision);
      }
      return size;
    }

    public void MergeFrom(Uid other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Revision.Length != 0) {
        Revision = other.Revision;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
          case 18: {
            Revision = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BigDecimal : pb::IMessage<BigDecimal> {
    private static readonly pb::MessageParser<BigDecimal> _parser = new pb::MessageParser<BigDecimal>(() => new BigDecimal());
    public static pb::MessageParser<BigDecimal> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "scale", "unscaled" };
    private static readonly uint[] _fieldTags = new uint[] { 16, 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.Descriptor.MessageTypes[1]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.internal__static_BigDecimal__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public BigDecimal() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BigDecimal(BigDecimal other) : this() {
      unscaled_ = other.unscaled_;
      scale_ = other.scale_;
    }

    public BigDecimal Clone() {
      return new BigDecimal(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int UnscaledFieldNumber = 1;
    private string unscaled_ = "";
    public string Unscaled {
      get { return unscaled_; }
      set {
        pb::Freezable.CheckMutable(this);
        unscaled_ = value ?? "";
      }
    }

    public const int ScaleFieldNumber = 2;
    private int scale_;
    public int Scale {
      get { return scale_; }
      set {
        pb::Freezable.CheckMutable(this);
        scale_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BigDecimal);
    }

    public bool Equals(BigDecimal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unscaled != other.Unscaled) return false;
      if (Scale != other.Scale) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Unscaled.Length != 0) hash ^= Unscaled.GetHashCode();
      if (Scale != 0) hash ^= Scale.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Unscaled.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Unscaled);
      }
      if (Scale != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Scale);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Unscaled.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unscaled);
      }
      if (Scale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Scale);
      }
      return size;
    }

    public void MergeFrom(BigDecimal other) {
      if (other == null) {
        return;
      }
      if (other.Unscaled.Length != 0) {
        Unscaled = other.Unscaled;
      }
      if (other.Scale != 0) {
        Scale = other.Scale;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            Unscaled = input.ReadString();
            break;
          }
          case 16: {
            Scale = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConnectorKey : pb::IMessage<ConnectorKey> {
    private static readonly pb::MessageParser<ConnectorKey> _parser = new pb::MessageParser<ConnectorKey>(() => new ConnectorKey());
    public static pb::MessageParser<ConnectorKey> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "bundleName", "bundleVersion", "connectorName" };
    private static readonly uint[] _fieldTags = new uint[] { 10, 18, 26 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.Descriptor.MessageTypes[2]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.internal__static_ConnectorKey__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ConnectorKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ConnectorKey(ConnectorKey other) : this() {
      bundleName_ = other.bundleName_;
      bundleVersion_ = other.bundleVersion_;
      connectorName_ = other.connectorName_;
    }

    public ConnectorKey Clone() {
      return new ConnectorKey(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int BundleNameFieldNumber = 1;
    private string bundleName_ = "";
    public string BundleName {
      get { return bundleName_; }
      set {
        pb::Freezable.CheckMutable(this);
        bundleName_ = value ?? "";
      }
    }

    public const int BundleVersionFieldNumber = 2;
    private string bundleVersion_ = "";
    public string BundleVersion {
      get { return bundleVersion_; }
      set {
        pb::Freezable.CheckMutable(this);
        bundleVersion_ = value ?? "";
      }
    }

    public const int ConnectorNameFieldNumber = 3;
    private string connectorName_ = "";
    public string ConnectorName {
      get { return connectorName_; }
      set {
        pb::Freezable.CheckMutable(this);
        connectorName_ = value ?? "";
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ConnectorKey);
    }

    public bool Equals(ConnectorKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BundleName != other.BundleName) return false;
      if (BundleVersion != other.BundleVersion) return false;
      if (ConnectorName != other.ConnectorName) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BundleName.Length != 0) hash ^= BundleName.GetHashCode();
      if (BundleVersion.Length != 0) hash ^= BundleVersion.GetHashCode();
      if (ConnectorName.Length != 0) hash ^= ConnectorName.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BundleName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BundleName);
      }
      if (BundleVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BundleVersion);
      }
      if (ConnectorName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ConnectorName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BundleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleName);
      }
      if (BundleVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleVersion);
      }
      if (ConnectorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectorName);
      }
      return size;
    }

    public void MergeFrom(ConnectorKey other) {
      if (other == null) {
        return;
      }
      if (other.BundleName.Length != 0) {
        BundleName = other.BundleName;
      }
      if (other.BundleVersion.Length != 0) {
        BundleVersion = other.BundleVersion;
      }
      if (other.ConnectorName.Length != 0) {
        ConnectorName = other.ConnectorName;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            BundleName = input.ReadString();
            break;
          }
          case 18: {
            BundleVersion = input.ReadString();
            break;
          }
          case 26: {
            ConnectorName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Locale : pb::IMessage<Locale> {
    private static readonly pb::MessageParser<Locale> _parser = new pb::MessageParser<Locale>(() => new Locale());
    public static pb::MessageParser<Locale> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "country", "language", "variant" };
    private static readonly uint[] _fieldTags = new uint[] { 18, 10, 26 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.Descriptor.MessageTypes[3]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.internal__static_Locale__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public Locale() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Locale(Locale other) : this() {
      language_ = other.language_;
      country_ = other.country_;
      variant_ = other.variant_;
    }

    public Locale Clone() {
      return new Locale(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int LanguageFieldNumber = 1;
    private string language_ = "";
    public string Language {
      get { return language_; }
      set {
        pb::Freezable.CheckMutable(this);
        language_ = value ?? "";
      }
    }

    public const int CountryFieldNumber = 2;
    private string country_ = "";
    public string Country {
      get { return country_; }
      set {
        pb::Freezable.CheckMutable(this);
        country_ = value ?? "";
      }
    }

    public const int VariantFieldNumber = 3;
    private string variant_ = "";
    public string Variant {
      get { return variant_; }
      set {
        pb::Freezable.CheckMutable(this);
        variant_ = value ?? "";
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Locale);
    }

    public bool Equals(Locale other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Language != other.Language) return false;
      if (Country != other.Country) return false;
      if (Variant != other.Variant) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (Variant.Length != 0) hash ^= Variant.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Language.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Language);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Country);
      }
      if (Variant.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Variant);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (Variant.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Variant);
      }
      return size;
    }

    public void MergeFrom(Locale other) {
      if (other == null) {
        return;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.Variant.Length != 0) {
        Variant = other.Variant;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            Language = input.ReadString();
            break;
          }
          case 18: {
            Country = input.ReadString();
            break;
          }
          case 26: {
            Variant = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Script : pb::IMessage<Script> {
    private static readonly pb::MessageParser<Script> _parser = new pb::MessageParser<Script>(() => new Script());
    public static pb::MessageParser<Script> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "scriptLanguage", "scriptText" };
    private static readonly uint[] _fieldTags = new uint[] { 10, 18 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.Descriptor.MessageTypes[4]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.internal__static_Script__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public Script() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Script(Script other) : this() {
      scriptLanguage_ = other.scriptLanguage_;
      scriptText_ = other.scriptText_;
    }

    public Script Clone() {
      return new Script(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int ScriptLanguageFieldNumber = 1;
    private string scriptLanguage_ = "";
    public string ScriptLanguage {
      get { return scriptLanguage_; }
      set {
        pb::Freezable.CheckMutable(this);
        scriptLanguage_ = value ?? "";
      }
    }

    public const int ScriptTextFieldNumber = 2;
    private string scriptText_ = "";
    public string ScriptText {
      get { return scriptText_; }
      set {
        pb::Freezable.CheckMutable(this);
        scriptText_ = value ?? "";
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Script);
    }

    public bool Equals(Script other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScriptLanguage != other.ScriptLanguage) return false;
      if (ScriptText != other.ScriptText) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ScriptLanguage.Length != 0) hash ^= ScriptLanguage.GetHashCode();
      if (ScriptText.Length != 0) hash ^= ScriptText.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ScriptLanguage.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScriptLanguage);
      }
      if (ScriptText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ScriptText);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ScriptLanguage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScriptLanguage);
      }
      if (ScriptText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScriptText);
      }
      return size;
    }

    public void MergeFrom(Script other) {
      if (other == null) {
        return;
      }
      if (other.ScriptLanguage.Length != 0) {
        ScriptLanguage = other.ScriptLanguage;
      }
      if (other.ScriptText.Length != 0) {
        ScriptText = other.ScriptText;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ScriptLanguage = input.ReadString();
            break;
          }
          case 18: {
            ScriptText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ScriptContext : pb::IMessage<ScriptContext> {
    private static readonly pb::MessageParser<ScriptContext> _parser = new pb::MessageParser<ScriptContext>(() => new ScriptContext());
    public static pb::MessageParser<ScriptContext> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "script", "scriptArguments" };
    private static readonly uint[] _fieldTags = new uint[] { 10, 18 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.Descriptor.MessageTypes[5]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.internal__static_ScriptContext__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ScriptContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ScriptContext(ScriptContext other) : this() {
      Script = other.script_ != null ? other.Script.Clone() : null;
      scriptArguments_ = other.scriptArguments_;
    }

    public ScriptContext Clone() {
      return new ScriptContext(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (script_ != null) Script.Freeze();
    }

    public const int ScriptFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Script script_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Script Script {
      get { return script_; }
      set {
        pb::Freezable.CheckMutable(this);
        script_ = value;
      }
    }

    public const int ScriptArgumentsFieldNumber = 2;
    private pb::ByteString scriptArguments_ = pb::ByteString.Empty;
    public pb::ByteString ScriptArguments {
      get { return scriptArguments_; }
      set {
        pb::Freezable.CheckMutable(this);
        scriptArguments_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ScriptContext);
    }

    public bool Equals(ScriptContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Script, other.Script)) return false;
      if (ScriptArguments != other.ScriptArguments) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (script_ != null) hash ^= Script.GetHashCode();
      if (ScriptArguments.Length != 0) hash ^= ScriptArguments.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (script_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Script);
      }
      if (ScriptArguments.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ScriptArguments);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (script_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Script);
      }
      if (ScriptArguments.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ScriptArguments);
      }
      return size;
    }

    public void MergeFrom(ScriptContext other) {
      if (other == null) {
        return;
      }
      if (other.script_ != null) {
        if (script_ == null) {
          script_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Script();
        }
        Script.MergeFrom(other.Script);
      }
      if (other.ScriptArguments.Length != 0) {
        ScriptArguments = other.ScriptArguments;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (script_ == null) {
              script_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Script();
            }
            input.ReadMessage(script_);
            break;
          }
          case 18: {
            ScriptArguments = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SearchResult : pb::IMessage<SearchResult> {
    private static readonly pb::MessageParser<SearchResult> _parser = new pb::MessageParser<SearchResult>(() => new SearchResult());
    public static pb::MessageParser<SearchResult> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "pagedResultsCookie", "remainingPagedResults" };
    private static readonly uint[] _fieldTags = new uint[] { 10, 16 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.Descriptor.MessageTypes[6]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.internal__static_SearchResult__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public SearchResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SearchResult(SearchResult other) : this() {
      pagedResultsCookie_ = other.pagedResultsCookie_;
      remainingPagedResults_ = other.remainingPagedResults_;
    }

    public SearchResult Clone() {
      return new SearchResult(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int PagedResultsCookieFieldNumber = 1;
    private string pagedResultsCookie_ = "";
    public string PagedResultsCookie {
      get { return pagedResultsCookie_; }
      set {
        pb::Freezable.CheckMutable(this);
        pagedResultsCookie_ = value ?? "";
      }
    }

    public const int RemainingPagedResultsFieldNumber = 2;
    private int remainingPagedResults_;
    public int RemainingPagedResults {
      get { return remainingPagedResults_; }
      set {
        pb::Freezable.CheckMutable(this);
        remainingPagedResults_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SearchResult);
    }

    public bool Equals(SearchResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PagedResultsCookie != other.PagedResultsCookie) return false;
      if (RemainingPagedResults != other.RemainingPagedResults) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PagedResultsCookie.Length != 0) hash ^= PagedResultsCookie.GetHashCode();
      if (RemainingPagedResults != 0) hash ^= RemainingPagedResults.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PagedResultsCookie.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PagedResultsCookie);
      }
      if (RemainingPagedResults != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemainingPagedResults);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PagedResultsCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PagedResultsCookie);
      }
      if (RemainingPagedResults != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainingPagedResults);
      }
      return size;
    }

    public void MergeFrom(SearchResult other) {
      if (other == null) {
        return;
      }
      if (other.PagedResultsCookie.Length != 0) {
        PagedResultsCookie = other.PagedResultsCookie;
      }
      if (other.RemainingPagedResults != 0) {
        RemainingPagedResults = other.RemainingPagedResults;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            PagedResultsCookie = input.ReadString();
            break;
          }
          case 16: {
            RemainingPagedResults = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SortKey : pb::IMessage<SortKey> {
    private static readonly pb::MessageParser<SortKey> _parser = new pb::MessageParser<SortKey>(() => new SortKey());
    public static pb::MessageParser<SortKey> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "field", "isAscending" };
    private static readonly uint[] _fieldTags = new uint[] { 10, 16 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.Descriptor.MessageTypes[7]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.internal__static_SortKey__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public SortKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SortKey(SortKey other) : this() {
      field_ = other.field_;
      isAscending_ = other.isAscending_;
    }

    public SortKey Clone() {
      return new SortKey(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int FieldFieldNumber = 1;
    private string field_ = "";
    public string Field {
      get { return field_; }
      set {
        pb::Freezable.CheckMutable(this);
        field_ = value ?? "";
      }
    }

    public const int IsAscendingFieldNumber = 2;
    private bool isAscending_;
    public bool IsAscending {
      get { return isAscending_; }
      set {
        pb::Freezable.CheckMutable(this);
        isAscending_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SortKey);
    }

    public bool Equals(SortKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Field != other.Field) return false;
      if (IsAscending != other.IsAscending) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Field.Length != 0) hash ^= Field.GetHashCode();
      if (IsAscending != false) hash ^= IsAscending.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Field.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Field);
      }
      if (IsAscending != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsAscending);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Field.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
      }
      if (IsAscending != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(SortKey other) {
      if (other == null) {
        return;
      }
      if (other.Field.Length != 0) {
        Field = other.Field;
      }
      if (other.IsAscending != false) {
        IsAscending = other.IsAscending;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            Field = input.ReadString();
            break;
          }
          case 16: {
            IsAscending = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SyncToken : pb::IMessage<SyncToken> {
    private static readonly pb::MessageParser<SyncToken> _parser = new pb::MessageParser<SyncToken>(() => new SyncToken());
    public static pb::MessageParser<SyncToken> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "value" };
    private static readonly uint[] _fieldTags = new uint[] { 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.Descriptor.MessageTypes[8]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.internal__static_SyncToken__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public SyncToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SyncToken(SyncToken other) : this() {
      value_ = other.value_;
    }

    public SyncToken Clone() {
      return new SyncToken(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int ValueFieldNumber = 1;
    private pb::ByteString value_ = pb::ByteString.Empty;
    public pb::ByteString Value {
      get { return value_; }
      set {
        pb::Freezable.CheckMutable(this);
        value_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SyncToken);
    }

    public bool Equals(SyncToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      return size;
    }

    public void MergeFrom(SyncToken other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SyncDelta : pb::IMessage<SyncDelta> {
    private static readonly pb::MessageParser<SyncDelta> _parser = new pb::MessageParser<SyncDelta>(() => new SyncDelta());
    public static pb::MessageParser<SyncDelta> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "connectorObject", "deltaType", "objectClass", "previousUid", "token", "uid" };
    private static readonly uint[] _fieldTags = new uint[] { 50, 16, 34, 26, 10, 42 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.Descriptor.MessageTypes[9]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.internal__static_SyncDelta__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public SyncDelta() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SyncDelta(SyncDelta other) : this() {
      Token = other.token_ != null ? other.Token.Clone() : null;
      deltaType_ = other.deltaType_;
      PreviousUid = other.previousUid_ != null ? other.PreviousUid.Clone() : null;
      objectClass_ = other.objectClass_;
      Uid = other.uid_ != null ? other.Uid.Clone() : null;
      connectorObject_ = other.connectorObject_;
    }

    public SyncDelta Clone() {
      return new SyncDelta(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (token_ != null) Token.Freeze();
      if (previousUid_ != null) PreviousUid.Freeze();
      if (uid_ != null) Uid.Freeze();
    }

    public const int TokenFieldNumber = 1;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken token_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken Token {
      get { return token_; }
      set {
        pb::Freezable.CheckMutable(this);
        token_ = value;
      }
    }

    public const int DeltaTypeFieldNumber = 2;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta.Types.SyncDeltaType deltaType_ = global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta.Types.SyncDeltaType.CREATE_OR_UPDATE;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta.Types.SyncDeltaType DeltaType {
      get { return deltaType_; }
      set {
        pb::Freezable.CheckMutable(this);
        deltaType_ = value;
      }
    }

    public const int PreviousUidFieldNumber = 3;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid previousUid_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid PreviousUid {
      get { return previousUid_; }
      set {
        pb::Freezable.CheckMutable(this);
        previousUid_ = value;
      }
    }

    public const int ObjectClassFieldNumber = 4;
    private string objectClass_ = "";
    public string ObjectClass {
      get { return objectClass_; }
      set {
        pb::Freezable.CheckMutable(this);
        objectClass_ = value ?? "";
      }
    }

    public const int UidFieldNumber = 5;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid uid_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid Uid {
      get { return uid_; }
      set {
        pb::Freezable.CheckMutable(this);
        uid_ = value;
      }
    }

    public const int ConnectorObjectFieldNumber = 6;
    private pb::ByteString connectorObject_ = pb::ByteString.Empty;
    public pb::ByteString ConnectorObject {
      get { return connectorObject_; }
      set {
        pb::Freezable.CheckMutable(this);
        connectorObject_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SyncDelta);
    }

    public bool Equals(SyncDelta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Token, other.Token)) return false;
      if (DeltaType != other.DeltaType) return false;
      if (!object.Equals(PreviousUid, other.PreviousUid)) return false;
      if (ObjectClass != other.ObjectClass) return false;
      if (!object.Equals(Uid, other.Uid)) return false;
      if (ConnectorObject != other.ConnectorObject) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (token_ != null) hash ^= Token.GetHashCode();
      if (DeltaType != global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta.Types.SyncDeltaType.CREATE_OR_UPDATE) hash ^= DeltaType.GetHashCode();
      if (previousUid_ != null) hash ^= PreviousUid.GetHashCode();
      if (ObjectClass.Length != 0) hash ^= ObjectClass.GetHashCode();
      if (uid_ != null) hash ^= Uid.GetHashCode();
      if (ConnectorObject.Length != 0) hash ^= ConnectorObject.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (token_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Token);
      }
      if (DeltaType != global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta.Types.SyncDeltaType.CREATE_OR_UPDATE) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DeltaType);
      }
      if (previousUid_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PreviousUid);
      }
      if (ObjectClass.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ObjectClass);
      }
      if (uid_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Uid);
      }
      if (ConnectorObject.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(ConnectorObject);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (token_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Token);
      }
      if (DeltaType != global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta.Types.SyncDeltaType.CREATE_OR_UPDATE) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeltaType);
      }
      if (previousUid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviousUid);
      }
      if (ObjectClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectClass);
      }
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      if (ConnectorObject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConnectorObject);
      }
      return size;
    }

    public void MergeFrom(SyncDelta other) {
      if (other == null) {
        return;
      }
      if (other.token_ != null) {
        if (token_ == null) {
          token_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken();
        }
        Token.MergeFrom(other.Token);
      }
      if (other.DeltaType != global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta.Types.SyncDeltaType.CREATE_OR_UPDATE) {
        DeltaType = other.DeltaType;
      }
      if (other.previousUid_ != null) {
        if (previousUid_ == null) {
          previousUid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
        }
        PreviousUid.MergeFrom(other.PreviousUid);
      }
      if (other.ObjectClass.Length != 0) {
        ObjectClass = other.ObjectClass;
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
        }
        Uid.MergeFrom(other.Uid);
      }
      if (other.ConnectorObject.Length != 0) {
        ConnectorObject = other.ConnectorObject;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            if (token_ == null) {
              token_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncToken();
            }
            input.ReadMessage(token_);
            break;
          }
          case 16: {
            deltaType_ = (global::Org.ForgeRock.OpenICF.Common.ProtoBuf.SyncDelta.Types.SyncDeltaType) input.ReadEnum();
            break;
          }
          case 26: {
            if (previousUid_ == null) {
              previousUid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
            }
            input.ReadMessage(previousUid_);
            break;
          }
          case 34: {
            ObjectClass = input.ReadString();
            break;
          }
          case 42: {
            if (uid_ == null) {
              uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
            }
            input.ReadMessage(uid_);
            break;
          }
          case 50: {
            ConnectorObject = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum SyncDeltaType {
        CREATE_OR_UPDATE = 0,
        DELETE = 1,
        CREATE = 2,
        UPDATE = 3,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ConnectorObject : pb::IMessage<ConnectorObject> {
    private static readonly pb::MessageParser<ConnectorObject> _parser = new pb::MessageParser<ConnectorObject>(() => new ConnectorObject());
    public static pb::MessageParser<ConnectorObject> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "attriutes", "objectClass" };
    private static readonly uint[] _fieldTags = new uint[] { 18, 10 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.Descriptor.MessageTypes[10]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.internal__static_ConnectorObject__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public ConnectorObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ConnectorObject(ConnectorObject other) : this() {
      objectClass_ = other.objectClass_;
      attriutes_ = other.attriutes_;
    }

    public ConnectorObject Clone() {
      return new ConnectorObject(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
    }

    public const int ObjectClassFieldNumber = 1;
    private string objectClass_ = "";
    public string ObjectClass {
      get { return objectClass_; }
      set {
        pb::Freezable.CheckMutable(this);
        objectClass_ = value ?? "";
      }
    }

    public const int AttriutesFieldNumber = 2;
    private pb::ByteString attriutes_ = pb::ByteString.Empty;
    public pb::ByteString Attriutes {
      get { return attriutes_; }
      set {
        pb::Freezable.CheckMutable(this);
        attriutes_ = value ?? pb::ByteString.Empty;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ConnectorObject);
    }

    public bool Equals(ConnectorObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectClass != other.ObjectClass) return false;
      if (Attriutes != other.Attriutes) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ObjectClass.Length != 0) hash ^= ObjectClass.GetHashCode();
      if (Attriutes.Length != 0) hash ^= Attriutes.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectClass.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectClass);
      }
      if (Attriutes.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Attriutes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ObjectClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectClass);
      }
      if (Attriutes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Attriutes);
      }
      return size;
    }

    public void MergeFrom(ConnectorObject other) {
      if (other == null) {
        return;
      }
      if (other.ObjectClass.Length != 0) {
        ObjectClass = other.ObjectClass;
      }
      if (other.Attriutes.Length != 0) {
        Attriutes = other.Attriutes;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ObjectClass = input.ReadString();
            break;
          }
          case 18: {
            Attriutes = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QualifiedUid : pb::IMessage<QualifiedUid> {
    private static readonly pb::MessageParser<QualifiedUid> _parser = new pb::MessageParser<QualifiedUid>(() => new QualifiedUid());
    public static pb::MessageParser<QualifiedUid> Parser { get { return _parser; } }

    private static readonly string[] _fieldNames = new string[] { "objectClass", "uid" };
    private static readonly uint[] _fieldTags = new uint[] { 10, 18 };
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.Descriptor.MessageTypes[11]; }
    }

    pbr::FieldAccessorTable pb::IReflectedMessage.Fields {
      get { return global::Org.ForgeRock.OpenICF.Common.ProtoBuf.CommonObjectMessages.internal__static_QualifiedUid__FieldAccessorTable; }
    }

    private bool _frozen = false;
    public bool IsFrozen { get { return _frozen; } }

    public QualifiedUid() {
      OnConstruction();
    }

    partial void OnConstruction();

    public QualifiedUid(QualifiedUid other) : this() {
      objectClass_ = other.objectClass_;
      Uid = other.uid_ != null ? other.Uid.Clone() : null;
    }

    public QualifiedUid Clone() {
      return new QualifiedUid(this);
    }

    public void Freeze() {
      if (IsFrozen) {
        return;
      }
      _frozen = true;
      if (uid_ != null) Uid.Freeze();
    }

    public const int ObjectClassFieldNumber = 1;
    private string objectClass_ = "";
    public string ObjectClass {
      get { return objectClass_; }
      set {
        pb::Freezable.CheckMutable(this);
        objectClass_ = value ?? "";
      }
    }

    public const int UidFieldNumber = 2;
    private global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid uid_;
    public global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid Uid {
      get { return uid_; }
      set {
        pb::Freezable.CheckMutable(this);
        uid_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as QualifiedUid);
    }

    public bool Equals(QualifiedUid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectClass != other.ObjectClass) return false;
      if (!object.Equals(Uid, other.Uid)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ObjectClass.Length != 0) hash ^= ObjectClass.GetHashCode();
      if (uid_ != null) hash ^= Uid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectClass.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ObjectClass);
      }
      if (uid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Uid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ObjectClass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectClass);
      }
      if (uid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uid);
      }
      return size;
    }

    public void MergeFrom(QualifiedUid other) {
      if (other == null) {
        return;
      }
      if (other.ObjectClass.Length != 0) {
        ObjectClass = other.ObjectClass;
      }
      if (other.uid_ != null) {
        if (uid_ == null) {
          uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
        }
        Uid.MergeFrom(other.Uid);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while (input.ReadTag(out tag)) {
        switch(tag) {
          case 0:
            throw pb::InvalidProtocolBufferException.InvalidTag();
          default:
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              return;
            }
            break;
          case 10: {
            ObjectClass = input.ReadString();
            break;
          }
          case 18: {
            if (uid_ == null) {
              uid_ = new global::Org.ForgeRock.OpenICF.Common.ProtoBuf.Uid();
            }
            input.ReadMessage(uid_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
